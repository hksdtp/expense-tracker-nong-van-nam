#!/usr/bin/env node

/**
 * Script ƒë·ªÉ x√≥a to√†n b·ªô d·ªØ li·ªáu chi ti√™u trong Google Sheets
 * Ch·ªâ gi·ªØ l·∫°i header row v√† x√≥a t·∫•t c·∫£ d·ªØ li·ªáu giao d·ªãch
 */

// Import tr·ª±c ti·∫øp t·ª´ googleapis v√† google-auth-library
const { google } = require('googleapis')
const { JWT } = require('google-auth-library')
require('dotenv').config({ path: '.env.local' })

// Kh·ªüi t·∫°o Google APIs
async function initGoogleAPIs() {
  try {
    console.log("Kh·ªüi t·∫°o Google APIs...")

    // L·∫•y private key t·ª´ env v√† format ƒë√∫ng
    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY || process.env.GOOGLE_PRIVATE_KEY
    if (!privateKey) {
      throw new Error('GOOGLE_SHEETS_PRIVATE_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh')
    }

    // Clean v√† format private key ƒë√∫ng c√°ch
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    // ƒê·∫£m b·∫£o private key c√≥ format ƒë√∫ng
    if (!privateKey.includes('-----BEGIN PRIVATE KEY-----')) {
      throw new Error('Invalid private key format')
    }

    const clientEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL || process.env.GOOGLE_CLIENT_EMAIL
    if (!clientEmail) {
      throw new Error('GOOGLE_SHEETS_CLIENT_EMAIL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh')
    }

    // T·∫°o JWT client
    const auth = new JWT({
      email: clientEmail,
      key: privateKey,
      scopes: ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"],
    })

    const sheets = google.sheets({ version: "v4", auth })
    const drive = google.drive({ version: "v3", auth })

    return { auth, sheets, drive }
  } catch (error) {
    console.error("L·ªói kh·ªüi t·∫°o Google APIs:", error)
    throw error
  }
}

async function getSpreadsheetId() {
  return process.env.GOOGLE_SHEETS_SHEET_ID || "14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4"
}

async function clearAllTransactionData() {
  console.log('üßπ B·∫Øt ƒë·∫ßu x√≥a to√†n b·ªô d·ªØ li·ªáu chi ti√™u...')
  
  try {
    // Kh·ªüi t·∫°o Google APIs
    const { sheets } = await initGoogleAPIs()
    const SPREADSHEET_ID = await getSpreadsheetId()
    const SHEET_NAME = "Sheet1"

    console.log(`üìä ƒêang k·∫øt n·ªëi v·ªõi Google Sheets: ${SPREADSHEET_ID}`)

    // L·∫•y th√¥ng tin v·ªÅ sheet hi·ªán t·∫°i
    const sheetInfo = await sheets.spreadsheets.get({
      spreadsheetId: SPREADSHEET_ID,
    })

    console.log(`üìã T√¨m th·∫•y ${sheetInfo.data.sheets.length} sheet(s)`)

    // T√¨m sheet c·∫ßn x√≥a d·ªØ li·ªáu
    const targetSheet = sheetInfo.data.sheets.find(sheet => sheet.properties.title === SHEET_NAME)
    
    if (!targetSheet) {
      console.log(`‚ùå Kh√¥ng t√¨m th·∫•y sheet "${SHEET_NAME}"`)
      return
    }

    console.log(`üéØ T√¨m th·∫•y sheet "${SHEET_NAME}" v·ªõi ${targetSheet.properties.gridProperties.rowCount} h√†ng`)

    // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra
    const currentData = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:Z`,
    })

    const rows = currentData.data.values || []
    console.log(`üìä Hi·ªán c√≥ ${rows.length} h√†ng d·ªØ li·ªáu (bao g·ªìm header)`)

    if (rows.length <= 1) {
      console.log('‚úÖ Sheet ƒë√£ tr·ªëng ho·∫∑c ch·ªâ c√≥ header, kh√¥ng c·∫ßn x√≥a g√¨')
      return
    }

    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ h√†ng 2 tr·ªü ƒëi (gi·ªØ l·∫°i header ·ªü h√†ng 1)
    const rangeToDelete = `${SHEET_NAME}!A2:Z${targetSheet.properties.gridProperties.rowCount}`
    
    console.log(`üóëÔ∏è ƒêang x√≥a d·ªØ li·ªáu t·ª´ range: ${rangeToDelete}`)

    await sheets.spreadsheets.values.clear({
      spreadsheetId: SPREADSHEET_ID,
      range: rangeToDelete,
    })

    console.log('‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu giao d·ªãch th√†nh c√¥ng!')

    // Ki·ªÉm tra l·∫°i ƒë·ªÉ x√°c nh·∫≠n
    const verifyData = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:Z`,
    })

    const remainingRows = verifyData.data.values || []
    console.log(`üîç Ki·ªÉm tra: C√≤n l·∫°i ${remainingRows.length} h√†ng (ch·ªâ header)`)

    // ƒê·∫£m b·∫£o header ƒë√∫ng format
    if (remainingRows.length === 0) {
      console.log('üìù Th√™m l·∫°i header cho sheet...')
      await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `${SHEET_NAME}!A1:L1`,
        valueInputOption: "RAW",
        resource: {
          values: [[
            "Ng√†y", 
            "Danh m·ª•c", 
            "M√¥ t·∫£", 
            "S·ªë ti·ªÅn", 
            "Lo·∫°i", 
            "Link h√≥a ƒë∆°n", 
            "Th·ªùi gian", 
            "Danh m·ª•c ph·ª•", 
            "S·ªë l∆∞·ª£ng", 
            "Ph∆∞∆°ng th·ª©c thanh to√°n", 
            "Ghi ch√∫",
            "URL ·∫£nh"
          ]],
        },
      })
      console.log('‚úÖ ƒê√£ th√™m header th√†nh c√¥ng!')
    }

    console.log('üéâ Ho√†n th√†nh! To√†n b·ªô d·ªØ li·ªáu chi ti√™u ƒë√£ ƒë∆∞·ª£c x√≥a.')
    console.log('üìä Google Sheets hi·ªán ƒë√£ s·∫°ch v√† s·∫µn s√†ng cho d·ªØ li·ªáu m·ªõi.')

  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a d·ªØ li·ªáu:', error)
    
    if (error.message.includes('PERMISSION_DENIED')) {
      console.error('üîê L·ªói quy·ªÅn truy c·∫≠p. Vui l√≤ng ki·ªÉm tra:')
      console.error('   - Service account c√≥ quy·ªÅn edit Google Sheets')
      console.error('   - GOOGLE_SHEETS_PRIVATE_KEY ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng')
      console.error('   - GOOGLE_SHEETS_CLIENT_EMAIL ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng')
    }
    
    if (error.message.includes('SPREADSHEET_NOT_FOUND')) {
      console.error('üìã Kh√¥ng t√¨m th·∫•y Google Sheets. Vui l√≤ng ki·ªÉm tra GOOGLE_SHEETS_SHEET_ID')
    }
    
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  clearAllTransactionData()
    .then(() => {
      console.log('‚úÖ Script ho√†n th√†nh th√†nh c√¥ng!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Script th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { clearAllTransactionData }
