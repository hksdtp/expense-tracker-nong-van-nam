#!/usr/bin/env node

/**
 * Script ki·ªÉm tra c·∫•u tr√∫c th·ª±c t·∫ø c·ªßa c·∫£ Sheet1 v√† Nh·∫≠t k√Ω
 * ƒê·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c mapping
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

async function verifyActualStructure() {
  console.log('üîç KI·ªÇM TRA C·∫§U TR√öC TH·ª∞C T·∫æ C·ª¶A SHEET1 V√Ä NH·∫¨T K√ù')
  console.log('=' .repeat(70))

  try {
    const { sheets } = await initGoogleAPIs()

    // Ki·ªÉm tra c·∫•u tr√∫c Sheet1 th·ª±c t·∫ø
    console.log('\nüìã B∆∞·ªõc 1: Ki·ªÉm tra c·∫•u tr√∫c Sheet1 th·ª±c t·∫ø')
    
    const sheet1Response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!1:1', // Header row
    })

    const sheet1Headers = sheet1Response.data.values?.[0] || []
    console.log(`   üìä Sheet1 c√≥ ${sheet1Headers.length} c·ªôt`)
    console.log('   üìä Headers Sheet1:')
    sheet1Headers.forEach((header, index) => {
      const letter = String.fromCharCode(65 + index)
      console.log(`      ${letter}. "${header}"`)
    })

    // Ki·ªÉm tra c·∫•u tr√∫c Nh·∫≠t k√Ω th·ª±c t·∫ø
    console.log('\nüìã B∆∞·ªõc 2: Ki·ªÉm tra c·∫•u tr√∫c Nh·∫≠t k√Ω th·ª±c t·∫ø')
    
    const nhatKyResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Nh·∫≠t k√Ω!1:1', // Header row
    })

    const nhatKyHeaders = nhatKyResponse.data.values?.[0] || []
    console.log(`   üìä Nh·∫≠t k√Ω c√≥ ${nhatKyHeaders.length} c·ªôt`)
    console.log('   üìä Headers Nh·∫≠t k√Ω:')
    nhatKyHeaders.forEach((header, index) => {
      const letter = String.fromCharCode(65 + index)
      console.log(`      ${letter}. "${header}"`)
    })

    // So s√°nh v√† t·∫°o mapping m·ªõi
    console.log('\nüìã B∆∞·ªõc 3: T·∫°o mapping m·ªõi d·ª±a tr√™n c·∫•u tr√∫c th·ª±c t·∫ø')
    console.log('   üìä Mapping c√≥ th·ªÉ th·ª±c hi·ªán:')
    
    const newMapping = []
    
    sheet1Headers.forEach((sheet1Header, sheet1Index) => {
      const sheet1Letter = String.fromCharCode(65 + sheet1Index)
      
      // T√¨m c·ªôt t∆∞∆°ng ·ª©ng trong Nh·∫≠t k√Ω
      const matchIndex = nhatKyHeaders.findIndex(nhatKyHeader => {
        const normalized1 = sheet1Header.toLowerCase().trim()
        const normalized2 = nhatKyHeader.toLowerCase().trim()
        
        // Exact matches
        if (normalized1 === normalized2) return true
        
        // Semantic matches
        if (normalized1.includes('ng√†y') && normalized2.includes('ng√†y')) return true
        if (normalized1.includes('danh m·ª•c') && normalized2.includes('ph√¢n lo·∫°i')) return true
        if (normalized1.includes('m√¥ t·∫£') && normalized2.includes('chi ti·∫øt')) return true
        if (normalized1.includes('s·ªë ti·ªÅn') && normalized2.includes('s·ªë ti·ªÅn')) return true
        if (normalized1.includes('lo·∫°i') && normalized2.includes('lo·∫°i')) return true
        if (normalized1.includes('link h√≥a ƒë∆°n') && normalized2.includes('h√¨nh ·∫£nh')) return true
        if (normalized1.includes('url ·∫£nh') && normalized2.includes('h√¨nh ·∫£nh')) return true
        if (normalized1.includes('ph∆∞∆°ng th·ª©c') && normalized2.includes('ngu·ªìn')) return true
        
        return false
      })
      
      if (matchIndex !== -1) {
        const nhatKyLetter = String.fromCharCode(65 + matchIndex)
        const confidence = sheet1Header.toLowerCase() === nhatKyHeaders[matchIndex].toLowerCase() ? 'HIGH' : 'MEDIUM'
        console.log(`      ‚úÖ ${sheet1Letter}. "${sheet1Header}" ‚Üí ${nhatKyLetter}. "${nhatKyHeaders[matchIndex]}" (${confidence})`)
        
        newMapping.push({
          sheet1: { letter: sheet1Letter, name: sheet1Header, index: sheet1Index },
          nhatKy: { letter: nhatKyLetter, name: nhatKyHeaders[matchIndex], index: matchIndex },
          confidence,
          match: true
        })
      } else {
        console.log(`      ‚ùå ${sheet1Letter}. "${sheet1Header}" ‚Üí KH√îNG T√åM TH·∫§Y`)
        
        newMapping.push({
          sheet1: { letter: sheet1Letter, name: sheet1Header, index: sheet1Index },
          nhatKy: null,
          confidence: 'NONE',
          match: false
        })
      }
    })

    // T√¨m c·ªôt trong Nh·∫≠t k√Ω kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng
    console.log('\n   üìä C·ªôt trong Nh·∫≠t k√Ω kh√¥ng ƒë∆∞·ª£c map:')
    nhatKyHeaders.forEach((nhatKyHeader, index) => {
      const isUsed = newMapping.some(m => m.nhatKy && m.nhatKy.index === index)
      if (!isUsed) {
        const letter = String.fromCharCode(65 + index)
        console.log(`      ‚ö†Ô∏è ${letter}. "${nhatKyHeader}" ‚Üí KH√îNG S·ª¨ D·ª§NG`)
      }
    })

    // Ph√¢n t√≠ch impact
    console.log('\nüìã B∆∞·ªõc 4: Ph√¢n t√≠ch impact c·ªßa s·ª± kh√°c bi·ªát')
    
    const matchedColumns = newMapping.filter(m => m.match).length
    const totalSheet1Columns = sheet1Headers.length
    const matchPercentage = Math.round((matchedColumns / totalSheet1Columns) * 100)
    
    console.log(`   üìä T·ª∑ l·ªá mapping: ${matchedColumns}/${totalSheet1Columns} (${matchPercentage}%)`)
    
    if (matchPercentage < 50) {
      console.log('   üö® C·∫¢NH B√ÅO: T·ª∑ l·ªá mapping th·∫•p - c·∫ßn xem x√©t l·∫°i chi·∫øn l∆∞·ª£c')
    } else if (matchPercentage < 70) {
      console.log('   ‚ö†Ô∏è CH√ö √ù: T·ª∑ l·ªá mapping trung b√¨nh - c·∫ßn x·ª≠ l√Ω c·∫©n th·∫≠n')
    } else {
      console.log('   ‚úÖ T·ªêT: T·ª∑ l·ªá mapping cao - c√≥ th·ªÉ ti·∫øn h√†nh migration')
    }

    // ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
    console.log('\nüìã B∆∞·ªõc 5: ƒê·ªÅ xu·∫•t gi·∫£i ph√°p')
    
    const unmatchedCritical = newMapping.filter(m => 
      !m.match && 
      (m.sheet1.name.toLowerCase().includes('ng√†y') ||
       m.sheet1.name.toLowerCase().includes('s·ªë ti·ªÅn') ||
       m.sheet1.name.toLowerCase().includes('lo·∫°i'))
    )
    
    if (unmatchedCritical.length > 0) {
      console.log('   üö® C√ÅC C·ªòT QUAN TR·ªåNG KH√îNG MATCH:')
      unmatchedCritical.forEach(col => {
        console.log(`      - ${col.sheet1.name}`)
      })
      console.log('   üí° C·∫ßn xem x√©t l·∫°i c·∫•u tr√∫c ho·∫∑c t·∫°o mapping th·ªß c√¥ng')
    } else {
      console.log('   ‚úÖ C√°c c·ªôt quan tr·ªçng ƒë·ªÅu c√≥ th·ªÉ map')
      console.log('   üí° C√≥ th·ªÉ ti·∫øn h√†nh migration v·ªõi x·ª≠ l√Ω cho c·ªôt kh√¥ng match')
    }

    return {
      sheet1Headers,
      nhatKyHeaders,
      newMapping,
      matchPercentage,
      success: true
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  verifyActualStructure()
    .then((result) => {
      console.log('\n‚úÖ Ki·ªÉm tra c·∫•u tr√∫c ho√†n th√†nh!')
      console.log(`üìä Mapping rate: ${result.matchPercentage}%`)
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ki·ªÉm tra th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { verifyActualStructure }
