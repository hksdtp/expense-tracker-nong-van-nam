#!/usr/bin/env node

/**
 * Script ph√¢n t√≠ch chi ti·∫øt giao d·ªãch ti·ªÅn m·∫∑t theo th√°ng
 * Ki·ªÉm tra th√°ng 5, 6, 7 ƒë·ªÉ x√°c minh s·ªë d∆∞
 */

require('dotenv').config({ path: '.env.local' })

async function analyzeCashTransactions() {
  console.log('üîç PH√ÇN T√çCH CHI TI·∫æT GIAO D·ªäCH TI·ªÄN M·∫∂T')
  console.log('=' .repeat(60))

  try {
    // Ki·ªÉm tra 3 th√°ng: 5, 6, 7
    const months = [
      { month: 5, year: 2025, name: 'Th√°ng 5/2025' },
      { month: 6, year: 2025, name: 'Th√°ng 6/2025' },
      { month: 7, year: 2025, name: 'Th√°ng 7/2025' }
    ]

    for (const period of months) {
      console.log(`\nüìÖ === ${period.name} ===`)
      
      // L·∫•y d·ªØ li·ªáu account cho th√°ng n√†y
      const accountResponse = await fetch(`http://localhost:3005/api/account-data?month=${period.month}&year=${period.year}`)
      
      if (accountResponse.ok) {
        const accountResult = await accountResponse.json()
        const accountData = accountResult.data
        
        console.log(`   üíµ Ti·ªÅn m·∫∑t c√≤n: ${accountData.cashRemaining.toLocaleString('vi-VN')} ƒë`)
        console.log(`   üí∏ Chi ti√™u ti·ªÅn m·∫∑t: ${accountData.cashExpenses.toLocaleString('vi-VN')} ƒë`)
      }
      
      // L·∫•y giao d·ªãch chi ti·∫øt cho th√°ng n√†y
      const transResponse = await fetch(`http://localhost:3005/api/transactions?month=${period.month}&year=${period.year}`)
      
      if (transResponse.ok) {
        const transResult = await transResponse.json()
        const transactions = transResult.transactions || []
        
        console.log(`   üìä T·ªïng giao d·ªãch: ${transactions.length}`)
        
        // L·ªçc giao d·ªãch ti·ªÅn m·∫∑t
        const cashTransactions = transactions.filter(t => 
          t.paymentMethod === 'cash' || 
          t.paymentMethod === 'Ti·ªÅn m·∫∑t' ||
          t.paymentMethod === 'ti·ªÅn m·∫∑t'
        )
        
        console.log(`   üíµ Giao d·ªãch ti·ªÅn m·∫∑t: ${cashTransactions.length}`)
        
        if (cashTransactions.length > 0) {
          // Ph√¢n t√≠ch thu chi ti·ªÅn m·∫∑t
          let cashIncome = 0
          let cashExpense = 0
          const incomeTransactions = []
          const expenseTransactions = []
          
          cashTransactions.forEach(t => {
            if (t.type === 'income') {
              cashIncome += t.amount
              incomeTransactions.push(t)
            } else {
              cashExpense += t.amount
              expenseTransactions.push(t)
            }
          })
          
          console.log(`   üìà Thu nh·∫≠p ti·ªÅn m·∫∑t: ${cashIncome.toLocaleString('vi-VN')} ƒë (${incomeTransactions.length} giao d·ªãch)`)
          console.log(`   üìâ Chi ti√™u ti·ªÅn m·∫∑t: ${cashExpense.toLocaleString('vi-VN')} ƒë (${expenseTransactions.length} giao d·ªãch)`)
          
          // Hi·ªÉn th·ªã chi ti·∫øt giao d·ªãch thu nh·∫≠p ti·ªÅn m·∫∑t
          if (incomeTransactions.length > 0) {
            console.log(`\n   üìà CHI TI·∫æT THU NH·∫¨P TI·ªÄN M·∫∂T:`)
            incomeTransactions.forEach((t, index) => {
              console.log(`      ${index + 1}. ${t.date} | ${t.description || 'Kh√¥ng c√≥ m√¥ t·∫£'} | ${t.amount.toLocaleString('vi-VN')} ƒë | ${t.category || 'Kh√¥ng c√≥ danh m·ª•c'}`)
            })
          }
          
          // Hi·ªÉn th·ªã chi ti·∫øt giao d·ªãch chi ti√™u ti·ªÅn m·∫∑t (top 5)
          if (expenseTransactions.length > 0) {
            console.log(`\n   üìâ CHI TI·∫æT CHI TI√äU TI·ªÄN M·∫∂T (Top 5):`)
            const topExpenses = expenseTransactions
              .sort((a, b) => b.amount - a.amount)
              .slice(0, 5)
            
            topExpenses.forEach((t, index) => {
              console.log(`      ${index + 1}. ${t.date} | ${t.description || 'Kh√¥ng c√≥ m√¥ t·∫£'} | ${t.amount.toLocaleString('vi-VN')} ƒë | ${t.category || 'Kh√¥ng c√≥ danh m·ª•c'}`)
            })
            
            if (expenseTransactions.length > 5) {
              console.log(`      ... v√† ${expenseTransactions.length - 5} giao d·ªãch kh√°c`)
            }
          }
        } else {
          console.log(`   ‚ö†Ô∏è Kh√¥ng c√≥ giao d·ªãch ti·ªÅn m·∫∑t n√†o`)
        }
      }
    }
    
    // Ph√¢n t√≠ch t·ªïng quan t·ª´ ƒë·∫ßu ƒë·∫øn nay
    console.log(`\nüìä === T·ªîNG QUAN T·ª™ ƒê·∫¶U ƒê·∫æN NAY ===`)
    
    // L·∫•y t·∫•t c·∫£ giao d·ªãch
    const allTransResponse = await fetch(`http://localhost:3005/api/transactions`)
    
    if (allTransResponse.ok) {
      const allTransResult = await allTransResponse.json()
      const allTransactions = allTransResult.transactions || []
      
      console.log(`   üìä T·ªïng t·∫•t c·∫£ giao d·ªãch: ${allTransactions.length}`)
      
      // L·ªçc t·∫•t c·∫£ giao d·ªãch ti·ªÅn m·∫∑t
      const allCashTransactions = allTransactions.filter(t => 
        t.paymentMethod === 'cash' || 
        t.paymentMethod === 'Ti·ªÅn m·∫∑t' ||
        t.paymentMethod === 'ti·ªÅn m·∫∑t'
      )
      
      console.log(`   üíµ T·ªïng giao d·ªãch ti·ªÅn m·∫∑t: ${allCashTransactions.length}`)
      
      // Ph√¢n t√≠ch theo th√°ng
      const monthlyBreakdown = {}
      
      allCashTransactions.forEach(t => {
        const date = new Date(t.date)
        const monthKey = `${date.getMonth() + 1}/${date.getFullYear()}`
        
        if (!monthlyBreakdown[monthKey]) {
          monthlyBreakdown[monthKey] = {
            income: 0,
            expense: 0,
            incomeCount: 0,
            expenseCount: 0
          }
        }
        
        if (t.type === 'income') {
          monthlyBreakdown[monthKey].income += t.amount
          monthlyBreakdown[monthKey].incomeCount++
        } else {
          monthlyBreakdown[monthKey].expense += t.amount
          monthlyBreakdown[monthKey].expenseCount++
        }
      })
      
      console.log(`\n   üìÖ BREAKDOWN THEO TH√ÅNG:`)
      Object.keys(monthlyBreakdown)
        .sort((a, b) => {
          const [monthA, yearA] = a.split('/').map(Number)
          const [monthB, yearB] = b.split('/').map(Number)
          return yearA - yearB || monthA - monthB
        })
        .forEach(monthKey => {
          const data = monthlyBreakdown[monthKey]
          const net = data.income - data.expense
          console.log(`      ${monthKey}: Thu ${data.income.toLocaleString('vi-VN')} ƒë (${data.incomeCount}) - Chi ${data.expense.toLocaleString('vi-VN')} ƒë (${data.expenseCount}) = ${net.toLocaleString('vi-VN')} ƒë`)
        })
      
      // T√≠nh t·ªïng c·ªông
      let totalCashIncome = 0
      let totalCashExpense = 0
      
      allCashTransactions.forEach(t => {
        if (t.type === 'income') {
          totalCashIncome += t.amount
        } else {
          totalCashExpense += t.amount
        }
      })
      
      const netCashBalance = totalCashIncome - totalCashExpense
      
      console.log(`\n   üí∞ T·ªîNG C·ªòNG:`)
      console.log(`      Thu nh·∫≠p ti·ªÅn m·∫∑t: ${totalCashIncome.toLocaleString('vi-VN')} ƒë`)
      console.log(`      Chi ti√™u ti·ªÅn m·∫∑t: ${totalCashExpense.toLocaleString('vi-VN')} ƒë`)
      console.log(`      S·ªë d∆∞ r√≤ng: ${netCashBalance.toLocaleString('vi-VN')} ƒë`)
      
      if (netCashBalance === 15166000) {
        console.log('      ‚úÖ Kh·ªõp v·ªõi "Ti·ªÅn m·∫∑t c√≤n" hi·ªán t·∫°i!')
      } else {
        console.log(`      ‚ö†Ô∏è Kh√¥ng kh·ªõp v·ªõi "Ti·ªÅn m·∫∑t c√≤n" (${(15166000).toLocaleString('vi-VN')} ƒë)`)
      }
    }
    
    console.log(`\nüí° K·∫æT LU·∫¨N:`)
    console.log(`   1. Ki·ªÉm tra xem c√≥ giao d·ªãch ti·ªÅn m·∫∑t n√†o trong th√°ng 5-6 kh√¥ng`)
    console.log(`   2. X√°c minh logic t√≠nh to√°n s·ªë d∆∞ ti·ªÅn m·∫∑t`)
    console.log(`   3. ƒê·ªÅ xu·∫•t ƒë·ªìng b·ªô sang th√°ng 7 n·∫øu c·∫ßn`)

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeCashTransactions()
    .then(() => {
      console.log('\n‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ph√¢n t√≠ch th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { analyzeCashTransactions }
