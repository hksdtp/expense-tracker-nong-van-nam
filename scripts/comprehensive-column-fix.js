#!/usr/bin/env node

/**
 * Script t·ªïng h·ª£p ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a t·∫•t c·∫£ v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn ghi d·ªØ li·ªáu v√†o sai c·ªôt
 */

require('dotenv').config({ path: '.env.local' })

async function comprehensiveColumnFix() {
  console.log('üîß KI·ªÇM TRA V√Ä S·ª¨A L·ªñI GHI D·ªÆ LI·ªÜU V√ÄO SAI C·ªòT')
  console.log('=' .repeat(70))
  
  try {
    // B∆∞·ªõc 1: Ki·ªÉm tra k·∫øt n·ªëi
    console.log('\nüìã B∆∞·ªõc 1: Ki·ªÉm tra k·∫øt n·ªëi Google Sheets')
    await checkConnection()
    
    // B∆∞·ªõc 2: Ki·ªÉm tra v√† s·ª≠a header
    console.log('\nüìã B∆∞·ªõc 2: Ki·ªÉm tra v√† s·ª≠a header')
    await checkAndFixHeader()
    
    // B∆∞·ªõc 3: Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu hi·ªán t·∫°i
    console.log('\nüìã B∆∞·ªõc 3: Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu hi·ªán t·∫°i')
    await checkCurrentDataStructure()
    
    // B∆∞·ªõc 4: Test th√™m giao d·ªãch m·ªõi
    console.log('\nüìã B∆∞·ªõc 4: Test th√™m giao d·ªãch m·ªõi')
    await testAddTransaction()
    
    // B∆∞·ªõc 5: X√°c minh k·∫øt qu·∫£
    console.log('\nüìã B∆∞·ªõc 5: X√°c minh k·∫øt qu·∫£')
    await verifyFix()
    
    console.log('\nüéâ HO√ÄN TH√ÄNH! T·∫•t c·∫£ v·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra v√† s·ª≠a.')
    
  } catch (error) {
    console.error('\nüí• L·ªói trong qu√° tr√¨nh s·ª≠a:', error)
    throw error
  }
}

async function checkConnection() {
  try {
    const { google } = require('googleapis')
    const { JWT } = require('google-auth-library')

    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const sheets = google.sheets({ version: 'v4', auth })
    const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID

    // Test k·∫øt n·ªëi
    const response = await sheets.spreadsheets.get({
      spreadsheetId: SPREADSHEET_ID,
    })

    console.log(`   ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi spreadsheet: ${response.data.properties.title}`)
    console.log(`   üìä Spreadsheet ID: ${SPREADSHEET_ID}`)
    console.log(`   üîë Service Account: ${process.env.GOOGLE_SHEETS_CLIENT_EMAIL}`)

  } catch (error) {
    console.log(`   ‚ùå L·ªói k·∫øt n·ªëi: ${error.message}`)
    throw error
  }
}

async function checkAndFixHeader() {
  try {
    const { google } = require('googleapis')
    const { JWT } = require('google-auth-library')

    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const sheets = google.sheets({ version: 'v4', auth })
    const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID

    // Ki·ªÉm tra header hi·ªán t·∫°i
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A1:L1',
    })

    const currentHeader = response.data.values?.[0] || []
    const correctHeader = [
      "Ng√†y", "Danh m·ª•c", "M√¥ t·∫£", "S·ªë ti·ªÅn", "Lo·∫°i", 
      "Link h√≥a ƒë∆°n", "Th·ªùi gian", "Danh m·ª•c ph·ª•", "S·ªë l∆∞·ª£ng", 
      "Ph∆∞∆°ng th·ª©c thanh to√°n", "Ghi ch√∫", "URL ·∫£nh"
    ]

    console.log(`   üìä Header hi·ªán t·∫°i: ${currentHeader.length} c·ªôt`)
    console.log(`   üìä Header c·∫ßn c√≥: ${correctHeader.length} c·ªôt`)

    let needsUpdate = currentHeader.length !== correctHeader.length
    if (!needsUpdate) {
      for (let i = 0; i < correctHeader.length; i++) {
        if (currentHeader[i] !== correctHeader[i]) {
          needsUpdate = true
          break
        }
      }
    }

    if (needsUpdate) {
      console.log('   üîß C·∫≠p nh·∫≠t header...')
      await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: 'Sheet1!A1:L1',
        valueInputOption: 'RAW',
        resource: {
          values: [correctHeader],
        },
      })
      console.log('   ‚úÖ Header ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!')
    } else {
      console.log('   ‚úÖ Header ƒë√£ ƒë√∫ng!')
    }

  } catch (error) {
    console.log(`   ‚ùå L·ªói ki·ªÉm tra header: ${error.message}`)
    throw error
  }
}

async function checkCurrentDataStructure() {
  try {
    const { google } = require('googleapis')
    const { JWT } = require('google-auth-library')

    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const sheets = google.sheets({ version: 'v4', auth })
    const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A:L',
    })

    const rows = response.data.values || []
    console.log(`   üìä T·ªïng s·ªë h√†ng: ${rows.length}`)
    
    if (rows.length > 1) {
      console.log('   üìã Ki·ªÉm tra 3 giao d·ªãch cu·ªëi:')
      const lastRows = rows.slice(-3)
      lastRows.forEach((row, index) => {
        const rowNum = rows.length - 3 + index + 1
        console.log(`      H√†ng ${rowNum}: C·ªôt A="${row[0]}" | C·ªôt L="${row[11] || '(tr·ªëng)'}"`)
      })
    } else {
      console.log('   üìã Ch·ªâ c√≥ header, ch∆∞a c√≥ d·ªØ li·ªáu')
    }

  } catch (error) {
    console.log(`   ‚ùå L·ªói ki·ªÉm tra c·∫•u tr√∫c: ${error.message}`)
  }
}

async function testAddTransaction() {
  try {
    const testData = {
      type: 'expense',
      category: 'Test Fix Column',
      description: 'Test sau khi s·ª≠a l·ªói c·ªôt',
      amount: '15000',
      paymentMethod: 'cash',
      date: '16/07/2025',
      note: 'Ki·ªÉm tra v·ªã tr√≠ c·ªôt',
      receiptLink: '',
      subCategory: 'Test Sub Fix',
      fuelLiters: ''
    }

    console.log('   üìã Th√™m giao d·ªãch test...')

    const formData = new FormData()
    Object.entries(testData).forEach(([key, value]) => {
      formData.append(key, value)
    })

    const response = await fetch('http://localhost:3000/api/transactions', {
      method: 'POST',
      body: formData,
    })

    if (response.ok) {
      const result = await response.json()
      console.log('   ‚úÖ Giao d·ªãch test ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!')
      return result
    } else {
      const errorData = await response.json()
      console.log('   ‚ùå L·ªói th√™m giao d·ªãch test:', errorData.error)
      throw new Error(errorData.error)
    }

  } catch (error) {
    console.log(`   ‚ùå L·ªói test th√™m giao d·ªãch: ${error.message}`)
    throw error
  }
}

async function verifyFix() {
  try {
    const { google } = require('googleapis')
    const { JWT } = require('google-auth-library')

    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const sheets = google.sheets({ version: 'v4', auth })
    const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID

    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A:L',
    })

    const rows = response.data.values || []
    
    if (rows.length > 1) {
      const lastRow = rows[rows.length - 1]
      const headers = rows[0]
      
      console.log('   üìã Giao d·ªãch v·ª´a th√™m:')
      
      // Ki·ªÉm tra c√°c c·ªôt quan tr·ªçng
      const checks = [
        { col: 'A', name: 'Ng√†y', value: lastRow[0] },
        { col: 'B', name: 'Danh m·ª•c', value: lastRow[1] },
        { col: 'C', name: 'M√¥ t·∫£', value: lastRow[2] },
        { col: 'D', name: 'S·ªë ti·ªÅn', value: lastRow[3] },
        { col: 'E', name: 'Lo·∫°i', value: lastRow[4] }
      ]
      
      let allCorrect = true
      checks.forEach(check => {
        const hasData = check.value && check.value.toString().trim() !== ''
        console.log(`      ${check.col} (${check.name}): ${hasData ? '‚úÖ' : '‚ùå'} "${check.value || '(tr·ªëng)'}"`)
        if (!hasData) allCorrect = false
      })
      
      // Ki·ªÉm tra c·ªôt L
      const colL = lastRow[11]
      console.log(`      L (URL ·∫£nh): ${colL ? 'üìé' : '‚≠ï'} "${colL || '(tr·ªëng)'}"`)
      
      if (allCorrect) {
        console.log('\n   üéâ TH√ÄNH C√îNG! D·ªØ li·ªáu ƒë∆∞·ª£c ghi ƒë√∫ng v·ªã tr√≠ t·ª´ c·ªôt A!')
      } else {
        console.log('\n   ‚ùå V·∫™N C√íN V·∫§N ƒê·ªÄ! D·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c ghi ƒë√∫ng v·ªã tr√≠!')
      }
      
    } else {
      console.log('   ‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ x√°c minh!')
    }

  } catch (error) {
    console.log(`   ‚ùå L·ªói x√°c minh: ${error.message}`)
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  comprehensiveColumnFix()
    .then(() => {
      console.log('\nüèÜ COMPREHENSIVE COLUMN FIX HO√ÄN TH√ÄNH!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• COMPREHENSIVE COLUMN FIX TH·∫§T B·∫†I:', error)
      process.exit(1)
    })
}

module.exports = { comprehensiveColumnFix }
