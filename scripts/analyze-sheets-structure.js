#!/usr/bin/env node

/**
 * Script ph√¢n t√≠ch to√†n di·ªán c·∫•u tr√∫c Google Sheets
 * Kh√°m ph√° sheet "Nh·∫≠t k√Ω" v√† ƒë√°nh gi√° kh·∫£ nƒÉng migration
 */

require('dotenv').config({ path: '.env.local' })

// Import Google APIs directly
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })

  return { sheets, auth }
}

async function analyzeSheetStructure() {
  console.log('üîç PH√ÇN T√çCH TO√ÄN DI·ªÜN C·∫§U TR√öC GOOGLE SHEETS')
  console.log('=' .repeat(60))

  try {
    // Kh·ªüi t·∫°o Google APIs
    console.log('\nüìã B∆∞·ªõc 1: Kh·ªüi t·∫°o Google APIs')
    const { sheets } = await initGoogleAPIs()
    const spreadsheetId = SPREADSHEET_ID
    
    console.log(`   üìä Spreadsheet ID: ${spreadsheetId}`)
    console.log(`   üîë Service Account: ${process.env.GOOGLE_SHEETS_CLIENT_EMAIL}`)

    // L·∫•y th√¥ng tin spreadsheet v√† danh s√°ch sheets
    console.log('\nüìã B∆∞·ªõc 2: Li·ªát k√™ t·∫•t c·∫£ sheets trong spreadsheet')
    
    const spreadsheetInfo = await sheets.spreadsheets.get({
      spreadsheetId,
    })

    const allSheets = spreadsheetInfo.data.sheets || []
    console.log(`   üìä T·ªïng s·ªë sheets: ${allSheets.length}`)
    
    allSheets.forEach((sheet, index) => {
      const sheetName = sheet.properties.title
      const sheetId = sheet.properties.sheetId
      const rowCount = sheet.properties.gridProperties?.rowCount || 0
      const columnCount = sheet.properties.gridProperties?.columnCount || 0
      
      console.log(`   ${index + 1}. "${sheetName}" (ID: ${sheetId}) - ${rowCount}x${columnCount}`)
    })

    // Ki·ªÉm tra sheet "Nh·∫≠t k√Ω" c√≥ t·ªìn t·∫°i kh√¥ng
    const nhatKySheet = allSheets.find(sheet => 
      sheet.properties.title === 'Nh·∫≠t k√Ω' || 
      sheet.properties.title === 'Nhat ky' ||
      sheet.properties.title.toLowerCase().includes('nh·∫≠t k√Ω') ||
      sheet.properties.title.toLowerCase().includes('nhat ky')
    )

    if (!nhatKySheet) {
      console.log('\n‚ùå KH√îNG T√åM TH·∫§Y SHEET "NH·∫¨T K√ù"')
      console.log('   üí° C√°c sheet c√≥ s·∫µn:')
      allSheets.forEach(sheet => {
        console.log(`      - "${sheet.properties.title}"`)
      })
      return { hasNhatKySheet: false, allSheets }
    }

    const nhatKySheetName = nhatKySheet.properties.title
    console.log(`\n‚úÖ T√åM TH·∫§Y SHEET: "${nhatKySheetName}"`)
    console.log(`   üìä Sheet ID: ${nhatKySheet.properties.sheetId}`)
    console.log(`   üìê K√≠ch th∆∞·ªõc: ${nhatKySheet.properties.gridProperties?.rowCount}x${nhatKySheet.properties.gridProperties?.columnCount}`)

    // ƒê·∫øm s·ªë rows c√≥ d·ªØ li·ªáu trong sheet "Nh·∫≠t k√Ω"
    console.log('\nüìã B∆∞·ªõc 3: ƒê·∫øm s·ªë rows c√≥ d·ªØ li·ªáu trong sheet "Nh·∫≠t k√Ω"')
    
    try {
      const dataRange = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `${nhatKySheetName}!A:Z`, // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
      })

      const rows = dataRange.data.values || []
      const nonEmptyRows = rows.filter(row => row && row.some(cell => cell && cell.toString().trim() !== ''))
      
      console.log(`   üìä T·ªïng s·ªë rows: ${rows.length}`)
      console.log(`   üìä Rows c√≥ d·ªØ li·ªáu: ${nonEmptyRows.length}`)
      console.log(`   üìä Rows tr·ªëng: ${rows.length - nonEmptyRows.length}`)

      return {
        hasNhatKySheet: true,
        nhatKySheetName,
        nhatKySheet,
        allSheets,
        totalRows: rows.length,
        dataRows: nonEmptyRows.length,
        rawData: rows
      }

    } catch (dataError) {
      console.log(`   ‚ùå L·ªói ƒë·ªçc d·ªØ li·ªáu: ${dataError.message}`)
      return {
        hasNhatKySheet: true,
        nhatKySheetName,
        nhatKySheet,
        allSheets,
        error: dataError.message
      }
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeSheetStructure()
    .then((result) => {
      console.log('\n‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!')
      if (result.hasNhatKySheet) {
        console.log(`üìä Sheet "${result.nhatKySheetName}" s·∫µn s√†ng ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt`)
      }
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ph√¢n t√≠ch th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { analyzeSheetStructure }
