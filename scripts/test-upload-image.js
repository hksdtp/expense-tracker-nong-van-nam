#!/usr/bin/env node

/**
 * Script ƒë·ªÉ test upload ·∫£nh l√™n Cloudinary v·ªõi th∆∞ m·ª•c nongvannam
 */

require('dotenv').config({ path: '.env.local' })
const fs = require('fs')
const path = require('path')

async function testUploadImage() {
  console.log('üß™ Test upload ·∫£nh l√™n Cloudinary...')
  console.log('üìÅ Th∆∞ m·ª•c: nongvannam')
  
  try {
    // Ki·ªÉm tra c·∫•u h√¨nh
    console.log('\nüìã 1. Ki·ªÉm tra c·∫•u h√¨nh:')
    console.log(`   Cloud Name: ${process.env.CLOUDINARY_CLOUD_NAME}`)
    console.log(`   API Key: ${process.env.CLOUDINARY_API_KEY ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'}`)
    console.log(`   API Secret: ${process.env.CLOUDINARY_API_SECRET ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'}`)
    console.log(`   Folder: ${process.env.CLOUDINARY_FOLDER}`)

    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      console.log('\n‚ùå Cloudinary ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß!')
      console.log('üí° Vui l√≤ng c·∫≠p nh·∫≠t file .env.local v·ªõi th√¥ng tin th·ª±c t·ª´ Cloudinary Dashboard')
      return
    }

    // Test k·∫øt n·ªëi Cloudinary
    console.log('\n‚òÅÔ∏è 2. Test k·∫øt n·ªëi Cloudinary:')
    const { v2: cloudinary } = require('cloudinary')
    
    cloudinary.config({
      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET,
    })

    try {
      const pingResult = await cloudinary.api.ping()
      console.log('   ‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!')
      console.log(`   üìä Status: ${pingResult.status}`)
    } catch (pingError) {
      console.log(`   ‚ùå L·ªói k·∫øt n·ªëi: ${pingError.message}`)
      return
    }

    // T·∫°o ·∫£nh test ƒë∆°n gi·∫£n
    console.log('\nüñºÔ∏è 3. T·∫°o ·∫£nh test:')
    const testImagePath = path.join(__dirname, 'test-image.txt')
    const testContent = `Test upload t·ª´ Expense Tracker
Th·ªùi gian: ${new Date().toISOString()}
Th∆∞ m·ª•c: nongvannam
User: N√¥ng VƒÉn NƒÉm`

    fs.writeFileSync(testImagePath, testContent)
    console.log(`   ‚úÖ ƒê√£ t·∫°o file test: ${testImagePath}`)

    // Upload l√™n Cloudinary
    console.log('\nüì§ 4. Upload l√™n Cloudinary:')
    try {
      const uploadResult = await cloudinary.uploader.upload(testImagePath, {
        folder: process.env.CLOUDINARY_FOLDER || 'nongvannam',
        public_id: `test-${Date.now()}`,
        resource_type: 'raw' // Upload as raw file
      })

      console.log('   ‚úÖ Upload th√†nh c√¥ng!')
      console.log(`   üìä Public ID: ${uploadResult.public_id}`)
      console.log(`   üîó URL: ${uploadResult.secure_url}`)
      console.log(`   üìÅ Folder: ${uploadResult.folder}`)

      // Test v·ªõi ·∫£nh th·∫≠t (n·∫øu c√≥)
      console.log('\nüñºÔ∏è 5. Test v·ªõi ·∫£nh th·∫≠t:')
      
      // T√¨m file ·∫£nh trong th∆∞ m·ª•c hi·ªán t·∫°i
      const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
      const currentDir = process.cwd()
      const files = fs.readdirSync(currentDir)
      
      const imageFile = files.find(file => 
        imageExtensions.some(ext => file.toLowerCase().endsWith(ext))
      )

      if (imageFile) {
        console.log(`   üì∑ T√¨m th·∫•y ·∫£nh: ${imageFile}`)
        
        const imageUploadResult = await cloudinary.uploader.upload(path.join(currentDir, imageFile), {
          folder: process.env.CLOUDINARY_FOLDER || 'nongvannam',
          public_id: `receipt-${Date.now()}`,
        })

        console.log('   ‚úÖ Upload ·∫£nh th√†nh c√¥ng!')
        console.log(`   üìä Public ID: ${imageUploadResult.public_id}`)
        console.log(`   üîó URL: ${imageUploadResult.secure_url}`)
        console.log(`   üìê K√≠ch th∆∞·ªõc: ${imageUploadResult.width}x${imageUploadResult.height}`)
        
      } else {
        console.log('   ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file ·∫£nh ƒë·ªÉ test')
        console.log('   üí° B·∫°n c√≥ th·ªÉ copy file ·∫£nh v√†o th∆∞ m·ª•c d·ª± √°n ƒë·ªÉ test')
      }

    } catch (uploadError) {
      console.log(`   ‚ùå L·ªói upload: ${uploadError.message}`)
      
      if (uploadError.message.includes('Invalid API key')) {
        console.log('   üí° API Key kh√¥ng h·ª£p l·ªá')
      } else if (uploadError.message.includes('Invalid API secret')) {
        console.log('   üí° API Secret kh√¥ng h·ª£p l·ªá')
      }
      return
    }

    // Test API endpoint
    console.log('\nüåê 6. Test API endpoint:')
    try {
      // T·∫°o FormData ƒë·ªÉ test
      const FormData = require('form-data')
      const fetch = require('node-fetch')
      
      const form = new FormData()
      form.append('file', fs.createReadStream(testImagePath))
      
      const response = await fetch('http://localhost:3000/api/upload-cloudinary', {
        method: 'POST',
        body: form,
      })

      if (response.ok) {
        const result = await response.json()
        console.log('   ‚úÖ API endpoint ho·∫°t ƒë·ªông!')
        console.log(`   üîó URL: ${result.url}`)
      } else {
        const errorData = await response.json()
        console.log(`   ‚ùå API l·ªói: ${errorData.error}`)
      }
      
    } catch (apiError) {
      console.log(`   ‚ö†Ô∏è Kh√¥ng th·ªÉ test API: ${apiError.message}`)
      console.log('   üí° ƒê·∫£m b·∫£o server ƒëang ch·∫°y: npm run dev')
    }

    // Cleanup
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath)
      console.log('\nüßπ ƒê√£ x√≥a file test')
    }

    console.log('\nüéâ Test ho√†n th√†nh!')
    console.log('üìä Cloudinary ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng v·ªõi th∆∞ m·ª•c "nongvannam"')
    console.log('üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ upload ·∫£nh trong web app!')

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh test:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testUploadImage()
    .then(() => {
      console.log('\n‚úÖ Test ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Test th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { testUploadImage }
