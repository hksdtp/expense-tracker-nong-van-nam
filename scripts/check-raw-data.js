#!/usr/bin/env node

/**
 * Script ki·ªÉm tra d·ªØ li·ªáu th√¥ t·ª´ Google Sheets
 * T√¨m giao d·ªãch ti·ªÅn m·∫∑t v√† ph√¢n t√≠ch theo th√°ng
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

function parseDate(dateString) {
  if (!dateString) return null
  
  try {
    // Th·ª≠ format DD/MM/YYYY tr∆∞·ªõc
    if (dateString.includes('/')) {
      const parts = dateString.split('/')
      if (parts.length === 3) {
        const day = parseInt(parts[0])
        const month = parseInt(parts[1])
        const year = parseInt(parts[2])
        
        if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
          return { day, month, year }
        }
      }
    }
    
    // Th·ª≠ Date constructor
    const date = new Date(dateString)
    if (!isNaN(date.getTime())) {
      return {
        day: date.getDate(),
        month: date.getMonth() + 1,
        year: date.getFullYear(),
      }
    }
    
    return null
  } catch (error) {
    return null
  }
}

async function checkRawData() {
  console.log('üîç KI·ªÇM TRA D·ªÆ LI·ªÜU TH√î T·ª™ GOOGLE SHEETS')
  console.log('=' .repeat(60))

  try {
    const { sheets } = await initGoogleAPIs()

    // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ Sheet1
    console.log('\nüìã L·∫•y d·ªØ li·ªáu t·ª´ Sheet1...')
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A:L',
    })

    const rows = response.data.values || []
    console.log(`   üìä T·ªïng rows: ${rows.length}`)
    
    if (rows.length === 0) {
      console.log('   ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu')
      return
    }

    // Headers
    const headers = rows[0]
    console.log(`   üìã Headers: [${headers.join(', ')}]`)
    
    // Data rows
    const dataRows = rows.slice(1)
    console.log(`   üìä Data rows: ${dataRows.length}`)

    // Ph√¢n t√≠ch c·∫•u tr√∫c
    console.log('\nüìã Ph√¢n t√≠ch c·∫•u tr√∫c:')
    headers.forEach((header, index) => {
      const letter = String.fromCharCode(65 + index)
      console.log(`   ${letter}. ${header}`)
    })

    // T√¨m index c·ªßa c√°c c·ªôt quan tr·ªçng
    const dateIndex = headers.findIndex(h => h.toLowerCase().includes('ng√†y'))
    const amountIndex = headers.findIndex(h => h.toLowerCase().includes('s·ªë ti·ªÅn'))
    const typeIndex = headers.findIndex(h => h.toLowerCase().includes('lo·∫°i'))
    const paymentIndex = headers.findIndex(h => h.toLowerCase().includes('ph∆∞∆°ng th·ª©c'))
    const descIndex = headers.findIndex(h => h.toLowerCase().includes('m√¥ t·∫£'))
    const categoryIndex = headers.findIndex(h => h.toLowerCase().includes('danh m·ª•c'))

    console.log('\nüìã Index mapping:')
    console.log(`   Ng√†y: ${dateIndex} (${headers[dateIndex] || 'N/A'})`)
    console.log(`   S·ªë ti·ªÅn: ${amountIndex} (${headers[amountIndex] || 'N/A'})`)
    console.log(`   Lo·∫°i: ${typeIndex} (${headers[typeIndex] || 'N/A'})`)
    console.log(`   Ph∆∞∆°ng th·ª©c: ${paymentIndex} (${headers[paymentIndex] || 'N/A'})`)
    console.log(`   M√¥ t·∫£: ${descIndex} (${headers[descIndex] || 'N/A'})`)
    console.log(`   Danh m·ª•c: ${categoryIndex} (${headers[categoryIndex] || 'N/A'})`)

    // Ph√¢n t√≠ch giao d·ªãch ti·ªÅn m·∫∑t
    console.log('\nüìã T√¨m giao d·ªãch ti·ªÅn m·∫∑t...')
    
    const cashTransactions = []
    const monthlyBreakdown = {}

    dataRows.forEach((row, index) => {
      const rowNum = index + 2 // +2 v√¨ skip header v√† 0-based
      
      const date = row[dateIndex] || ''
      const amount = parseFloat(row[amountIndex]) || 0
      const type = row[typeIndex] || ''
      const paymentMethod = row[paymentIndex] || ''
      const description = row[descIndex] || ''
      const category = row[categoryIndex] || ''

      // Ki·ªÉm tra xem c√≥ ph·∫£i ti·ªÅn m·∫∑t kh√¥ng
      const isCash = paymentMethod.toLowerCase().includes('cash') || 
                     paymentMethod.toLowerCase().includes('ti·ªÅn m·∫∑t') ||
                     paymentMethod.toLowerCase().includes('tien mat')

      if (isCash && amount > 0) {
        const dateInfo = parseDate(date)
        
        const transaction = {
          rowNum,
          date,
          dateInfo,
          amount,
          type,
          paymentMethod,
          description,
          category
        }
        
        cashTransactions.push(transaction)
        
        if (dateInfo) {
          const monthKey = `${dateInfo.month}/${dateInfo.year}`
          if (!monthlyBreakdown[monthKey]) {
            monthlyBreakdown[monthKey] = {
              income: 0,
              expense: 0,
              transactions: []
            }
          }
          
          if (type.toLowerCase().includes('income') || type.toLowerCase().includes('thu')) {
            monthlyBreakdown[monthKey].income += amount
          } else {
            monthlyBreakdown[monthKey].expense += amount
          }
          
          monthlyBreakdown[monthKey].transactions.push(transaction)
        }
      }
    })

    console.log(`   üíµ T·ªïng giao d·ªãch ti·ªÅn m·∫∑t: ${cashTransactions.length}`)

    if (cashTransactions.length > 0) {
      console.log('\nüìã BREAKDOWN THEO TH√ÅNG:')
      
      Object.keys(monthlyBreakdown)
        .sort((a, b) => {
          const [monthA, yearA] = a.split('/').map(Number)
          const [monthB, yearB] = b.split('/').map(Number)
          return yearA - yearB || monthA - monthB
        })
        .forEach(monthKey => {
          const data = monthlyBreakdown[monthKey]
          const net = data.income - data.expense
          console.log(`\n   üìÖ ${monthKey}:`)
          console.log(`      Thu: ${data.income.toLocaleString('vi-VN')} ƒë`)
          console.log(`      Chi: ${data.expense.toLocaleString('vi-VN')} ƒë`)
          console.log(`      R√≤ng: ${net.toLocaleString('vi-VN')} ƒë`)
          console.log(`      Giao d·ªãch: ${data.transactions.length}`)
          
          // Hi·ªÉn th·ªã chi ti·∫øt giao d·ªãch
          data.transactions.forEach((t, index) => {
            console.log(`         ${index + 1}. Row ${t.rowNum}: ${t.date} | ${t.description} | ${t.amount.toLocaleString('vi-VN')} ƒë | ${t.type}`)
          })
        })

      // T√≠nh t·ªïng
      let totalIncome = 0
      let totalExpense = 0
      
      cashTransactions.forEach(t => {
        if (t.type.toLowerCase().includes('income') || t.type.toLowerCase().includes('thu')) {
          totalIncome += t.amount
        } else {
          totalExpense += t.amount
        }
      })
      
      const netBalance = totalIncome - totalExpense
      
      console.log('\nüìä T·ªîNG C·ªòNG:')
      console.log(`   Thu nh·∫≠p: ${totalIncome.toLocaleString('vi-VN')} ƒë`)
      console.log(`   Chi ti√™u: ${totalExpense.toLocaleString('vi-VN')} ƒë`)
      console.log(`   S·ªë d∆∞ r√≤ng: ${netBalance.toLocaleString('vi-VN')} ƒë`)
      
      if (netBalance === 15166000) {
        console.log(`   ‚úÖ Kh·ªõp v·ªõi "Ti·ªÅn m·∫∑t c√≤n" hi·ªán t·∫°i!`)
      } else {
        console.log(`   ‚ö†Ô∏è Kh√¥ng kh·ªõp v·ªõi "Ti·ªÅn m·∫∑t c√≤n" (15.166.000 ƒë)`)
        console.log(`   üîç Ch√™nh l·ªách: ${(netBalance - 15166000).toLocaleString('vi-VN')} ƒë`)
      }
    } else {
      console.log('   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y giao d·ªãch ti·ªÅn m·∫∑t n√†o')
      console.log('   üí° C√≥ th·ªÉ do:')
      console.log('      - T√™n c·ªôt "Ph∆∞∆°ng th·ª©c thanh to√°n" kh√°c')
      console.log('      - Gi√° tr·ªã kh√¥ng ch·ª©a "cash" ho·∫∑c "ti·ªÅn m·∫∑t"')
      console.log('      - D·ªØ li·ªáu migration c√≥ format kh√°c')
      
      // Ki·ªÉm tra m·ªôt s·ªë sample ƒë·ªÉ debug
      console.log('\nüìã SAMPLE DATA (5 rows ƒë·∫ßu):')
      dataRows.slice(0, 5).forEach((row, index) => {
        console.log(`   Row ${index + 2}: [${row.join(' | ')}]`)
      })
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  checkRawData()
    .then(() => {
      console.log('\n‚úÖ Ki·ªÉm tra ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ki·ªÉm tra th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { checkRawData }
