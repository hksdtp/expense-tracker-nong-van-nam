#!/usr/bin/env node

/**
 * Script l·∫•y m·∫´u d·ªØ li·ªáu th·ª±c t·ª´ sheet "Nh·∫≠t k√Ω" ƒë·ªÉ ph√¢n t√≠ch
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

async function sampleDataAnalysis() {
  console.log('üîç PH√ÇN T√çCH M·∫™U D·ªÆ LI·ªÜU TH·ª∞C T·ª™ SHEET "NH·∫¨T K√ù"')
  console.log('=' .repeat(60))

  try {
    const { sheets } = await initGoogleAPIs()

    // L·∫•y 10 rows ƒë·∫ßu ti√™n (bao g·ªìm header)
    console.log('\nüìã B∆∞·ªõc 1: L·∫•y m·∫´u d·ªØ li·ªáu t·ª´ sheet "Nh·∫≠t k√Ω"')
    
    const sampleResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Nh·∫≠t k√Ω!A1:H11', // Header + 10 rows d·ªØ li·ªáu
    })

    const rows = sampleResponse.data.values || []
    
    if (rows.length === 0) {
      console.log('   ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu trong sheet "Nh·∫≠t k√Ω"')
      return
    }

    const headers = rows[0]
    const dataRows = rows.slice(1)

    console.log(`   üìä Headers: [${headers.join(', ')}]`)
    console.log(`   üìä S·ªë m·∫´u d·ªØ li·ªáu: ${dataRows.length}`)

    // Ph√¢n t√≠ch t·ª´ng m·∫´u d·ªØ li·ªáu
    console.log('\nüìã B∆∞·ªõc 2: Ph√¢n t√≠ch chi ti·∫øt t·ª´ng m·∫´u d·ªØ li·ªáu')
    
    dataRows.forEach((row, index) => {
      console.log(`\n   üìä M·∫´u ${index + 1}:`)
      headers.forEach((header, colIndex) => {
        const value = row[colIndex] || ''
        const letter = String.fromCharCode(65 + colIndex)
        console.log(`      ${letter}. ${header}: "${value}"`)
      })
    })

    // Ph√¢n t√≠ch format d·ªØ li·ªáu
    console.log('\nüìã B∆∞·ªõc 3: Ph√¢n t√≠ch format d·ªØ li·ªáu')
    
    headers.forEach((header, colIndex) => {
      console.log(`\n   üìä C·ªôt ${String.fromCharCode(65 + colIndex)}. "${header}":`)
      
      const columnValues = dataRows.map(row => row[colIndex] || '').filter(val => val.trim() !== '')
      console.log(`      üìä S·ªë gi√° tr·ªã kh√¥ng r·ªóng: ${columnValues.length}`)
      
      if (columnValues.length > 0) {
        // Ph√¢n t√≠ch ki·ªÉu d·ªØ li·ªáu
        const sampleValues = columnValues.slice(0, 5)
        console.log(`      üìä M·∫´u gi√° tr·ªã: [${sampleValues.join(', ')}]`)
        
        // Ki·ªÉm tra format ng√†y
        if (header.toLowerCase().includes('ng√†y')) {
          const dateFormats = sampleValues.map(val => {
            if (/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(val)) return 'DD/MM/YYYY'
            if (/^\d{4}-\d{2}-\d{2}$/.test(val)) return 'YYYY-MM-DD'
            if (/^\d{1,2}-\d{1,2}-\d{4}$/.test(val)) return 'DD-MM-YYYY'
            return 'UNKNOWN'
          })
          console.log(`      üìÖ Format ng√†y: [${dateFormats.join(', ')}]`)
        }
        
        // Ki·ªÉm tra format ti·ªÅn
        if (header.toLowerCase().includes('ti·ªÅn') || header.toLowerCase().includes('gi√° tr·ªã')) {
          const numberFormats = sampleValues.map(val => {
            const cleanVal = val.replace(/[,.\s]/g, '')
            if (/^\d+$/.test(cleanVal)) return 'NUMBER'
            if (/^-?\d+[,.]?\d*$/.test(val)) return 'DECIMAL'
            return 'TEXT'
          })
          console.log(`      üí∞ Format ti·ªÅn: [${numberFormats.join(', ')}]`)
        }
        
        // Ki·ªÉm tra unique values cho categorical data
        if (header.toLowerCase().includes('lo·∫°i') || header.toLowerCase().includes('ph√¢n lo·∫°i')) {
          const uniqueValues = [...new Set(columnValues)]
          console.log(`      üìã Unique values: [${uniqueValues.join(', ')}]`)
        }
      }
    })

    // Mapping suggestions
    console.log('\nüìã B∆∞·ªõc 4: ƒê·ªÅ xu·∫•t mapping c·ªôt')
    console.log('   üìä Mapping c√≥ th·ªÉ th·ª±c hi·ªán:')
    
    const mappingSuggestions = [
      { nhatKy: 'Ng√†y', sheet1: 'Ng√†y', confidence: 'HIGH', note: 'Exact match' },
      { nhatKy: 'S·ªë ti·ªÅn', sheet1: 'S·ªë ti·ªÅn', confidence: 'HIGH', note: 'Exact match' },
      { nhatKy: 'Ph√¢n lo·∫°i', sheet1: 'Lo·∫°i', confidence: 'MEDIUM', note: 'C√≥ th·ªÉ c·∫ßn mapping gi√° tr·ªã' },
      { nhatKy: 'Chi ti·∫øt', sheet1: 'M√¥ t·∫£', confidence: 'MEDIUM', note: 'C√≥ th·ªÉ d√πng l√†m m√¥ t·∫£' },
      { nhatKy: 'Ngu·ªìn ti·ªÅn', sheet1: 'T√†i kho·∫£n', confidence: 'LOW', note: 'C·∫ßn ki·ªÉm tra format' },
      { nhatKy: 'H√¨nh ·∫£nh', sheet1: 'Link bi√™n lai', confidence: 'LOW', note: 'C·∫ßn ki·ªÉm tra format URL' }
    ]
    
    mappingSuggestions.forEach(suggestion => {
      const confidence = suggestion.confidence === 'HIGH' ? '‚úÖ' : 
                        suggestion.confidence === 'MEDIUM' ? '‚ö†Ô∏è' : '‚ùå'
      console.log(`      ${confidence} "${suggestion.nhatKy}" ‚Üí "${suggestion.sheet1}" (${suggestion.confidence}) - ${suggestion.note}`)
    })

    return {
      headers,
      sampleData: dataRows,
      mappingSuggestions,
      success: true
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  sampleDataAnalysis()
    .then((result) => {
      console.log('\n‚úÖ Ph√¢n t√≠ch m·∫´u d·ªØ li·ªáu ho√†n th√†nh!')
      console.log(`üìä ƒê√£ ph√¢n t√≠ch ${result.sampleData.length} m·∫´u d·ªØ li·ªáu`)
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ph√¢n t√≠ch th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { sampleDataAnalysis }
