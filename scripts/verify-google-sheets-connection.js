#!/usr/bin/env node

/**
 * Script ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi Google Sheets v√† x√°c minh d·ªØ li·ªáu
 */

// Import tr·ª±c ti·∫øp t·ª´ googleapis v√† google-auth-library
const { google } = require('googleapis')
const { JWT } = require('google-auth-library')
require('dotenv').config({ path: '.env.local' })

// Kh·ªüi t·∫°o Google APIs
async function initGoogleAPIs() {
  try {
    console.log("Kh·ªüi t·∫°o Google APIs...")

    // L·∫•y private key t·ª´ env v√† format ƒë√∫ng
    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY || process.env.GOOGLE_PRIVATE_KEY
    if (!privateKey) {
      throw new Error('GOOGLE_SHEETS_PRIVATE_KEY kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh')
    }

    // Clean v√† format private key ƒë√∫ng c√°ch
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    // ƒê·∫£m b·∫£o private key c√≥ format ƒë√∫ng
    if (!privateKey.includes('-----BEGIN PRIVATE KEY-----')) {
      throw new Error('Invalid private key format')
    }

    const clientEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL || process.env.GOOGLE_CLIENT_EMAIL
    if (!clientEmail) {
      throw new Error('GOOGLE_SHEETS_CLIENT_EMAIL kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh')
    }

    // T·∫°o JWT client
    const auth = new JWT({
      email: clientEmail,
      key: privateKey,
      scopes: ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"],
    })

    const sheets = google.sheets({ version: "v4", auth })
    const drive = google.drive({ version: "v3", auth })

    return { auth, sheets, drive }
  } catch (error) {
    console.error("L·ªói kh·ªüi t·∫°o Google APIs:", error)
    throw error
  }
}

async function getSpreadsheetId() {
  return process.env.GOOGLE_SHEETS_SHEET_ID || "14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4"
}

async function verifyGoogleSheetsConnection() {
  console.log('üîç Ki·ªÉm tra k·∫øt n·ªëi Google Sheets...')
  
  try {
    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    console.log('üìã Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng...')
    
    const requiredEnvVars = [
      'GOOGLE_SHEETS_PRIVATE_KEY',
      'GOOGLE_SHEETS_CLIENT_EMAIL', 
      'GOOGLE_SHEETS_SHEET_ID',
      'GOOGLE_SHEETS_SHEET_NAME'
    ]
    
    const missingVars = requiredEnvVars.filter(varName => !process.env[varName])
    
    if (missingVars.length > 0) {
      console.error('‚ùå Thi·∫øu c√°c bi·∫øn m√¥i tr∆∞·ªùng:')
      missingVars.forEach(varName => console.error(`   - ${varName}`))
      throw new Error('Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt')
    }
    
    console.log('‚úÖ T·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh')

    // Kh·ªüi t·∫°o Google APIs
    console.log('üîó ƒêang k·∫øt n·ªëi v·ªõi Google APIs...')
    const { sheets } = await initGoogleAPIs()
    const SPREADSHEET_ID = await getSpreadsheetId()
    const SHEET_NAME = "Sheet1"

    console.log(`üìä Spreadsheet ID: ${SPREADSHEET_ID}`)
    console.log(`üìã Sheet Name: ${SHEET_NAME}`)

    // Ki·ªÉm tra quy·ªÅn truy c·∫≠p spreadsheet
    console.log('üîê Ki·ªÉm tra quy·ªÅn truy c·∫≠p...')
    const sheetInfo = await sheets.spreadsheets.get({
      spreadsheetId: SPREADSHEET_ID,
    })

    console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng! Spreadsheet: "${sheetInfo.data.properties.title}"`)
    console.log(`üìä T√¨m th·∫•y ${sheetInfo.data.sheets.length} sheet(s):`)
    
    sheetInfo.data.sheets.forEach(sheet => {
      console.log(`   - ${sheet.properties.title} (${sheet.properties.gridProperties.rowCount} h√†ng, ${sheet.properties.gridProperties.columnCount} c·ªôt)`)
    })

    // Ki·ªÉm tra sheet c·ª• th·ªÉ
    const targetSheet = sheetInfo.data.sheets.find(sheet => sheet.properties.title === SHEET_NAME)
    
    if (!targetSheet) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y sheet "${SHEET_NAME}". T·∫°o sheet m·ªõi...`)
      
      await sheets.spreadsheets.batchUpdate({
        spreadsheetId: SPREADSHEET_ID,
        requestBody: {
          requests: [{
            addSheet: {
              properties: {
                title: SHEET_NAME,
              },
            },
          }],
        },
      })
      
      console.log(`‚úÖ ƒê√£ t·∫°o sheet "${SHEET_NAME}" th√†nh c√¥ng`)
    }

    // L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
    console.log('üìä ƒêang l·∫•y d·ªØ li·ªáu hi·ªán t·∫°i...')
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:L`,
    })

    const rows = response.data.values || []
    console.log(`üìã T√¨m th·∫•y ${rows.length} h√†ng d·ªØ li·ªáu`)

    if (rows.length === 0) {
      console.log('üìù Sheet tr·ªëng, th√™m header...')
      await sheets.spreadsheets.values.update({
        spreadsheetId: SPREADSHEET_ID,
        range: `${SHEET_NAME}!A1:L1`,
        valueInputOption: "RAW",
        resource: {
          values: [[
            "Ng√†y", 
            "Danh m·ª•c", 
            "M√¥ t·∫£", 
            "S·ªë ti·ªÅn", 
            "Lo·∫°i", 
            "Link h√≥a ƒë∆°n", 
            "Th·ªùi gian", 
            "Danh m·ª•c ph·ª•", 
            "S·ªë l∆∞·ª£ng", 
            "Ph∆∞∆°ng th·ª©c thanh to√°n", 
            "Ghi ch√∫",
            "URL ·∫£nh"
          ]],
        },
      })
      console.log('‚úÖ ƒê√£ th√™m header th√†nh c√¥ng')
    } else {
      console.log('üìä Header hi·ªán t·∫°i:', rows[0])
      console.log(`üí∞ S·ªë giao d·ªãch: ${rows.length - 1}`)
      
      if (rows.length > 1) {
        console.log('üìã Giao d·ªãch m·∫´u (5 giao d·ªãch ƒë·∫ßu):')
        rows.slice(1, 6).forEach((row, index) => {
          console.log(`   ${index + 1}. ${row[0]} - ${row[1]} - ${row[2]} - ${row[3]}`)
        })
      }
    }

    // Test API endpoint
    console.log('üß™ Ki·ªÉm tra API endpoint...')
    try {
      const apiResponse = await fetch('http://localhost:3000/api/transactions?month=7&year=2025')
      if (apiResponse.ok) {
        const apiData = await apiResponse.json()
        console.log(`‚úÖ API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng. Tr·∫£ v·ªÅ ${apiData.transactions?.length || 0} giao d·ªãch`)
      } else {
        console.log(`‚ö†Ô∏è API tr·∫£ v·ªÅ status: ${apiResponse.status}`)
      }
    } catch (apiError) {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra API (server c√≥ th·ªÉ ch∆∞a ch·∫°y)')
    }

    console.log('üéâ T·∫•t c·∫£ ki·ªÉm tra ƒë√£ ho√†n th√†nh!')
    console.log('üìä Google Sheets ƒë√£ s·∫µn s√†ng l√†m ngu·ªìn d·ªØ li·ªáu ch√≠nh')

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error)
    
    if (error.message.includes('PERMISSION_DENIED')) {
      console.error('üîê L·ªói quy·ªÅn truy c·∫≠p. H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:')
      console.error('   1. Ki·ªÉm tra service account c√≥ quy·ªÅn edit Google Sheets')
      console.error('   2. Chia s·∫ª Google Sheets v·ªõi email service account')
      console.error('   3. Ki·ªÉm tra GOOGLE_SHEETS_PRIVATE_KEY v√† CLIENT_EMAIL')
    }
    
    if (error.message.includes('SPREADSHEET_NOT_FOUND')) {
      console.error('üìã Kh√¥ng t√¨m th·∫•y Google Sheets. H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:')
      console.error('   1. Ki·ªÉm tra GOOGLE_SHEETS_SHEET_ID c√≥ ƒë√∫ng kh√¥ng')
      console.error('   2. ƒê·∫£m b·∫£o Google Sheets t·ªìn t·∫°i v√† c√≥ th·ªÉ truy c·∫≠p')
    }
    
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  verifyGoogleSheetsConnection()
    .then(() => {
      console.log('‚úÖ Ki·ªÉm tra ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Ki·ªÉm tra th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { verifyGoogleSheetsConnection }
