#!/usr/bin/env node

/**
 * Script ƒë·ªÉ test upload ·∫£nh th·∫≠t qua API endpoint
 */

require('dotenv').config({ path: '.env.local' })
const fs = require('fs')
const path = require('path')

async function testRealUpload() {
  console.log('üß™ Test upload ·∫£nh th·∫≠t qua API endpoint...')
  
  try {
    // T·∫°o m·ªôt ·∫£nh test ƒë∆°n gi·∫£n (1x1 pixel PNG)
    const testImageBuffer = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // 1x1 pixel
      0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xDE, // IHDR data
      0x00, 0x00, 0x00, 0x0C, 0x49, 0x44, 0x41, 0x54, // IDAT chunk
      0x08, 0x99, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, // IDAT data
      0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82 // IEND chunk
    ])

    const testImagePath = path.join(__dirname, 'test-upload.png')
    fs.writeFileSync(testImagePath, testImageBuffer)
    console.log('‚úÖ ƒê√£ t·∫°o ·∫£nh test PNG')

    // Test upload qua API
    console.log('\nüì§ Test upload qua API endpoint:')
    
    const FormData = require('form-data')
    const fetch = require('node-fetch')
    
    const form = new FormData()
    form.append('file', fs.createReadStream(testImagePath), {
      filename: 'test-receipt.png',
      contentType: 'image/png'
    })

    console.log('üåê G·ª≠i request ƒë·∫øn API...')
    
    const response = await fetch('http://localhost:3000/api/upload-cloudinary', {
      method: 'POST',
      body: form,
    })

    console.log(`üìä Response status: ${response.status}`)

    if (response.ok) {
      const result = await response.json()
      console.log('‚úÖ Upload th√†nh c√¥ng!')
      console.log(`üîó URL: ${result.url}`)
      console.log(`üìä Public ID: ${result.public_id}`)
      console.log(`üìÅ Folder: ${result.folder}`)
      
      // Ki·ªÉm tra URL c√≥ ho·∫°t ƒë·ªông kh√¥ng
      console.log('\nüîç Ki·ªÉm tra URL ·∫£nh:')
      try {
        const imageResponse = await fetch(result.url)
        if (imageResponse.ok) {
          console.log('‚úÖ URL ·∫£nh ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng')
          console.log(`üìê Content-Type: ${imageResponse.headers.get('content-type')}`)
          console.log(`üìä Content-Length: ${imageResponse.headers.get('content-length')} bytes`)
        } else {
          console.log(`‚ùå URL ·∫£nh l·ªói: ${imageResponse.status}`)
        }
      } catch (urlError) {
        console.log(`‚ùå L·ªói ki·ªÉm tra URL: ${urlError.message}`)
      }
      
    } else {
      const errorData = await response.json()
      console.log('‚ùå Upload th·∫•t b·∫°i!')
      console.log(`üìã Error: ${errorData.error}`)
      
      if (errorData.error && errorData.error.includes('API key')) {
        console.log('üí° V·∫•n ƒë·ªÅ v·ªõi API key Cloudinary')
      }
    }

    // Cleanup
    if (fs.existsSync(testImagePath)) {
      fs.unlinkSync(testImagePath)
      console.log('\nüßπ ƒê√£ x√≥a file test')
    }

    console.log('\nüéâ Test ho√†n th√†nh!')
    
    if (response.ok) {
      console.log('‚úÖ Cloudinary upload ƒë√£ ho·∫°t ƒë·ªông!')
      console.log('üì± B√¢y gi·ªù b·∫°n c√≥ th·ªÉ upload ·∫£nh trong web app')
      console.log('üìÅ ·∫¢nh s·∫Ω ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c "nongvannam"')
    } else {
      console.log('‚ùå C·∫ßn ki·ªÉm tra l·∫°i c·∫•u h√¨nh Cloudinary')
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh test:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testRealUpload()
    .then(() => {
      console.log('\n‚úÖ Test ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Test th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { testRealUpload }
