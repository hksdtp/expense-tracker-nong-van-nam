#!/usr/bin/env node

/**
 * Script debug s·ªë d∆∞ ti·ªÅn m·∫∑t ƒë·ªÉ hi·ªÉu t·∫°i sao c√≥ 15.166.000 ƒë
 */

require('dotenv').config({ path: '.env.local' })

async function debugCashBalance() {
  console.log('üîç DEBUG S·ªê D∆Ø TI·ªÄN M·∫∂T')
  console.log('=' .repeat(50))

  try {
    // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu account
    const currentDate = new Date()
    const month = currentDate.getMonth() + 1
    const year = currentDate.getFullYear()
    
    console.log(`üìÖ Th√°ng hi·ªán t·∫°i: ${month}/${year}`)
    
    const response = await fetch(`http://localhost:3005/api/account-data?month=${month}&year=${year}`)
    
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`)
    }
    
    const result = await response.json()
    
    if (!result.success) {
      throw new Error(`API failed: ${result.error}`)
    }
    
    const accountData = result.data
    
    console.log('\nüìä K·∫æT QU·∫¢ T√çNH TO√ÅN:')
    console.log(`   üí∞ S·ªë d∆∞ hi·ªán c√≥: ${accountData.currentBalance.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üè¶ T√†i kho·∫£n c√≤n: ${accountData.accountRemaining.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üíµ Ti·ªÅn m·∫∑t c√≤n: ${accountData.cashRemaining.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üìà T·ªïng chi ti√™u: ${accountData.totalExpense.toLocaleString('vi-VN')} ƒë`)
    
    console.log('\nüìã CHI TI·∫æT BREAKDOWN:')
    console.log(`   üè¶ S·ªë d∆∞ ƒë·∫ßu k·ª≥ t√†i kho·∫£n: ${accountData.beginningBalance.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üí∞ T·ªïng ƒë√£ ·ª©ng th√°ng n√†y: ${accountData.totalAdvanced.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üí∏ Chi ti√™u t√†i kho·∫£n: ${accountData.accountExpenses.toLocaleString('vi-VN')} ƒë`)
    console.log(`   üí∏ Chi ti√™u ti·ªÅn m·∫∑t: ${accountData.cashExpenses.toLocaleString('vi-VN')} ƒë`)
    
    // G·ªçi API transactions ƒë·ªÉ xem chi ti·∫øt
    console.log('\nüìã PH√ÇN T√çCH GIAO D·ªäCH TI·ªÄN M·∫∂T:')
    
    const transResponse = await fetch(`http://localhost:3005/api/transactions?month=${month}&year=${year}`)
    
    if (transResponse.ok) {
      const transResult = await transResponse.json()
      const transactions = transResult.transactions || []
      
      console.log(`   üìä T·ªïng giao d·ªãch th√°ng ${month}/${year}: ${transactions.length}`)
      
      // L·ªçc giao d·ªãch ti·ªÅn m·∫∑t
      const cashTransactions = transactions.filter(t => 
        t.paymentMethod === 'cash' || t.paymentMethod === 'Ti·ªÅn m·∫∑t'
      )
      
      console.log(`   üíµ Giao d·ªãch ti·ªÅn m·∫∑t: ${cashTransactions.length}`)
      
      // Ph√¢n t√≠ch giao d·ªãch ti·ªÅn m·∫∑t
      let cashIncome = 0
      let cashExpense = 0
      
      cashTransactions.forEach(t => {
        if (t.type === 'income') {
          cashIncome += t.amount
        } else {
          cashExpense += t.amount
        }
      })
      
      console.log(`   üìà Thu nh·∫≠p ti·ªÅn m·∫∑t th√°ng n√†y: ${cashIncome.toLocaleString('vi-VN')} ƒë`)
      console.log(`   üìâ Chi ti√™u ti·ªÅn m·∫∑t th√°ng n√†y: ${cashExpense.toLocaleString('vi-VN')} ƒë`)
      
      // Hi·ªÉn th·ªã m·ªôt s·ªë giao d·ªãch ti·ªÅn m·∫∑t m·∫´u
      console.log('\nüìã M·∫™U GIAO D·ªäCH TI·ªÄN M·∫∂T:')
      const sampleCash = cashTransactions.slice(0, 5)
      sampleCash.forEach((t, index) => {
        console.log(`   ${index + 1}. ${t.date} | ${t.description} | ${t.amount.toLocaleString('vi-VN')} ƒë | ${t.type}`)
      })
      
      if (cashTransactions.length > 5) {
        console.log(`   ... v√† ${cashTransactions.length - 5} giao d·ªãch kh√°c`)
      }
    }
    
    // Ph√¢n t√≠ch ngu·ªìn g·ªëc s·ªë ti·ªÅn 15.166.000
    console.log('\nüîç PH√ÇN T√çCH NGU·ªíN G·ªêC S·ªê TI·ªÄN 15.166.000:')
    
    if (accountData.cashRemaining === 15166000) {
      console.log('   ‚úÖ ƒê√¢y ch√≠nh l√† s·ªë "Ti·ªÅn m·∫∑t c√≤n" hi·ªán t·∫°i')
      console.log('   üìä S·ªë n√†y ƒë∆∞·ª£c t√≠nh t·ª´:')
      console.log('      = T·∫•t c·∫£ thu nh·∫≠p ti·ªÅn m·∫∑t t·ª´ tr∆∞·ªõc ƒë·∫øn nay')
      console.log('      - T·∫•t c·∫£ chi ti√™u ti·ªÅn m·∫∑t t·ª´ tr∆∞·ªõc ƒë·∫øn nay')
      console.log('   üí° C√≥ th·ªÉ do migration 352 records t·ª´ "Nh·∫≠t k√Ω" c√≥ nhi·ªÅu giao d·ªãch ti·ªÅn m·∫∑t')
    } else {
      console.log(`   ‚ö†Ô∏è S·ªë hi·ªán t·∫°i l√† ${accountData.cashRemaining.toLocaleString('vi-VN')} ƒë, kh√°c v·ªõi 15.166.000`)
    }
    
    console.log('\nüí° ƒê·ªÄ XU·∫§T KI·ªÇM TRA:')
    console.log('   1. Xem t·∫•t c·∫£ giao d·ªãch c√≥ paymentMethod = "cash" ho·∫∑c "Ti·ªÅn m·∫∑t"')
    console.log('   2. Ki·ªÉm tra d·ªØ li·ªáu migration t·ª´ "Nh·∫≠t k√Ω" c√≥ ƒë√∫ng kh√¥ng')
    console.log('   3. X√°c minh logic t√≠nh to√°n trong lib/data.ts')
    console.log('   4. C√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh s·ªë d∆∞ ƒë·∫ßu k·ª≥ n·∫øu kh√¥ng ch√≠nh x√°c')

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh debug:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  debugCashBalance()
    .then(() => {
      console.log('\n‚úÖ Debug ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Debug th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { debugCashBalance }
