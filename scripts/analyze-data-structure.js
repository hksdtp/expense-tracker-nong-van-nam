#!/usr/bin/env node

/**
 * Script ph√¢n t√≠ch c·∫•u tr√∫c d·ªØ li·ªáu chi ti·∫øt c·ªßa sheet "Nh·∫≠t k√Ω"
 * So s√°nh v·ªõi c·∫•u tr√∫c Sheet1 hi·ªán t·∫°i
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

// C·∫•u tr√∫c hi·ªán t·∫°i c·ªßa Sheet1
const SHEET1_STRUCTURE = [
  'Ng√†y',           // A - Date
  'Danh m·ª•c',       // B - Category  
  'M√¥ t·∫£',          // C - Description
  'S·ªë ti·ªÅn',        // D - Amount
  'Lo·∫°i',           // E - Type (income/expense)
  'Danh m·ª•c ph·ª•',   // F - Sub category
  'L√≠t xƒÉng',       // G - Fuel liters
  'Ph∆∞∆°ng th·ª©c thanh to√°n', // H - Payment method
  'Ghi ch√∫',        // I - Note
  'T√†i kho·∫£n',      // J - Account
  'S·ªë d∆∞',          // K - Balance
  'Link bi√™n lai'   // L - Receipt link
]

async function analyzeDataStructure() {
  console.log('üîç PH√ÇN T√çCH C·∫§U TR√öC D·ªÆ LI·ªÜU CHI TI·∫æT')
  console.log('=' .repeat(60))

  try {
    const { sheets } = await initGoogleAPIs()

    // Ph√¢n t√≠ch c·∫•u tr√∫c Sheet1 hi·ªán t·∫°i
    console.log('\nüìã B∆∞·ªõc 1: Ph√¢n t√≠ch c·∫•u tr√∫c Sheet1 hi·ªán t·∫°i')
    console.log('   üìä C·∫•u tr√∫c c·ªôt Sheet1:')
    SHEET1_STRUCTURE.forEach((col, index) => {
      const letter = String.fromCharCode(65 + index) // A, B, C, ...
      console.log(`      ${letter}. ${col}`)
    })

    // ƒê·ªçc headers c·ªßa sheet "Nh·∫≠t k√Ω"
    console.log('\nüìã B∆∞·ªõc 2: ƒê·ªçc headers c·ªßa sheet "Nh·∫≠t k√Ω"')
    
    const headersResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Nh·∫≠t k√Ω!1:1', // Row ƒë·∫ßu ti√™n ch·ª©a headers
    })

    const nhatKyHeaders = headersResponse.data.values?.[0] || []
    console.log(`   üìä S·ªë c·ªôt trong "Nh·∫≠t k√Ω": ${nhatKyHeaders.length}`)
    console.log('   üìä Headers "Nh·∫≠t k√Ω":')
    nhatKyHeaders.forEach((header, index) => {
      const letter = String.fromCharCode(65 + index)
      console.log(`      ${letter}. "${header}"`)
    })

    // So s√°nh c·∫•u tr√∫c
    console.log('\nüìã B∆∞·ªõc 3: So s√°nh c·∫•u tr√∫c c·ªôt')
    console.log('   üìä Mapping gi·ªØa Sheet1 v√† Nh·∫≠t k√Ω:')
    
    const mapping = []
    SHEET1_STRUCTURE.forEach((sheet1Col, index) => {
      const sheet1Letter = String.fromCharCode(65 + index)
      
      // T√¨m c·ªôt t∆∞∆°ng ·ª©ng trong Nh·∫≠t k√Ω
      const matchIndex = nhatKyHeaders.findIndex(nhatKyCol => {
        const normalized1 = sheet1Col.toLowerCase().trim()
        const normalized2 = nhatKyCol.toLowerCase().trim()
        
        // Exact match
        if (normalized1 === normalized2) return true
        
        // Partial matches
        if (normalized1.includes('ng√†y') && normalized2.includes('ng√†y')) return true
        if (normalized1.includes('danh m·ª•c') && normalized2.includes('danh m·ª•c') && !normalized1.includes('ph·ª•') && !normalized2.includes('ph·ª•')) return true
        if (normalized1.includes('m√¥ t·∫£') && normalized2.includes('m√¥ t·∫£')) return true
        if (normalized1.includes('s·ªë ti·ªÅn') && normalized2.includes('ti·ªÅn')) return true
        if (normalized1.includes('lo·∫°i') && normalized2.includes('lo·∫°i')) return true
        if (normalized1.includes('danh m·ª•c ph·ª•') && normalized2.includes('ph·ª•')) return true
        if (normalized1.includes('xƒÉng') && normalized2.includes('xƒÉng')) return true
        if (normalized1.includes('thanh to√°n') && normalized2.includes('thanh to√°n')) return true
        if (normalized1.includes('ghi ch√∫') && normalized2.includes('ghi ch√∫')) return true
        if (normalized1.includes('t√†i kho·∫£n') && normalized2.includes('t√†i kho·∫£n')) return true
        if (normalized1.includes('s·ªë d∆∞') && normalized2.includes('d∆∞')) return true
        if (normalized1.includes('bi√™n lai') && normalized2.includes('bi√™n lai')) return true
        
        return false
      })
      
      if (matchIndex !== -1) {
        const nhatKyLetter = String.fromCharCode(65 + matchIndex)
        console.log(`      ‚úÖ ${sheet1Letter}. "${sheet1Col}" ‚Üí ${nhatKyLetter}. "${nhatKyHeaders[matchIndex]}"`)
        mapping.push({
          sheet1: { letter: sheet1Letter, name: sheet1Col, index },
          nhatKy: { letter: nhatKyLetter, name: nhatKyHeaders[matchIndex], index: matchIndex },
          match: true
        })
      } else {
        console.log(`      ‚ùå ${sheet1Letter}. "${sheet1Col}" ‚Üí KH√îNG T√åM TH·∫§Y`)
        mapping.push({
          sheet1: { letter: sheet1Letter, name: sheet1Col, index },
          nhatKy: null,
          match: false
        })
      }
    })

    // T√¨m c·ªôt trong Nh·∫≠t k√Ω kh√¥ng c√≥ trong Sheet1
    console.log('\n   üìä C·ªôt trong "Nh·∫≠t k√Ω" kh√¥ng c√≥ trong Sheet1:')
    nhatKyHeaders.forEach((nhatKyCol, index) => {
      const isUsed = mapping.some(m => m.nhatKy && m.nhatKy.index === index)
      if (!isUsed) {
        const letter = String.fromCharCode(65 + index)
        console.log(`      ‚ö†Ô∏è ${letter}. "${nhatKyCol}" ‚Üí KH√îNG S·ª¨ D·ª§NG`)
      }
    })

    return {
      sheet1Headers: SHEET1_STRUCTURE,
      nhatKyHeaders,
      mapping,
      success: true
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  analyzeDataStructure()
    .then((result) => {
      console.log('\n‚úÖ Ph√¢n t√≠ch c·∫•u tr√∫c ho√†n th√†nh!')
      console.log(`üìä T√¨m th·∫•y ${result.mapping.filter(m => m.match).length}/${result.sheet1Headers.length} c·ªôt kh·ªõp`)
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ph√¢n t√≠ch th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { analyzeDataStructure }
