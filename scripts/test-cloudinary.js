#!/usr/bin/env node

/**
 * Script ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh Cloudinary
 */

require('dotenv').config({ path: '.env.local' })

async function testCloudinary() {
  console.log('üîç Ki·ªÉm tra c·∫•u h√¨nh Cloudinary...')
  
  try {
    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    console.log('\nüìã 1. Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng:')
    console.log(`   CLOUDINARY_CLOUD_NAME: ${process.env.CLOUDINARY_CLOUD_NAME}`)
    console.log(`   CLOUDINARY_API_KEY: ${process.env.CLOUDINARY_API_KEY ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'}`)
    console.log(`   CLOUDINARY_API_SECRET: ${process.env.CLOUDINARY_API_SECRET ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh'}`)
    console.log(`   CLOUDINARY_FOLDER: ${process.env.CLOUDINARY_FOLDER}`)

    if (!process.env.CLOUDINARY_CLOUD_NAME || !process.env.CLOUDINARY_API_KEY || !process.env.CLOUDINARY_API_SECRET) {
      console.log('\n‚ùå Cloudinary ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß!')
      console.log('\nüìù H∆∞·ªõng d·∫´n c·∫•u h√¨nh:')
      console.log('1. Truy c·∫≠p https://cloudinary.com/')
      console.log('2. ƒêƒÉng k√Ω/ƒëƒÉng nh·∫≠p t√†i kho·∫£n')
      console.log('3. V√†o Dashboard ƒë·ªÉ l·∫•y th√¥ng tin:')
      console.log('   - Cloud Name')
      console.log('   - API Key') 
      console.log('   - API Secret')
      console.log('4. C·∫≠p nh·∫≠t file .env.local v·ªõi th√¥ng tin th·ª±c')
      return
    }

    // Ki·ªÉm tra API endpoint
    console.log('\nüåê 2. Ki·ªÉm tra API endpoint:')
    
    try {
      const response = await fetch('http://localhost:3000/api/upload-cloudinary', {
        method: 'POST',
        body: new FormData() // Empty form data ƒë·ªÉ test
      })
      
      console.log(`   Status: ${response.status}`)
      
      if (response.status === 400) {
        console.log('   ‚úÖ API endpoint ho·∫°t ƒë·ªông (tr·∫£ v·ªÅ 400 do kh√¥ng c√≥ file)')
      } else if (response.status === 500) {
        const errorData = await response.json()
        console.log(`   ‚ùå API l·ªói: ${errorData.error}`)
        
        if (errorData.error === 'Cloudinary not configured') {
          console.log('   üí° C·∫ßn c·∫•u h√¨nh Cloudinary credentials')
        }
      } else {
        console.log('   ‚ö†Ô∏è Ph·∫£n h·ªìi kh√¥ng mong ƒë·ª£i')
      }
    } catch (apiError) {
      console.log(`   ‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi API: ${apiError.message}`)
      console.log('   üí° ƒê·∫£m b·∫£o server ƒëang ch·∫°y tr√™n http://localhost:3000')
    }

    // Ki·ªÉm tra v·ªõi Cloudinary SDK
    console.log('\n‚òÅÔ∏è 3. Ki·ªÉm tra Cloudinary SDK:')
    
    try {
      const { v2: cloudinary } = require('cloudinary')
      
      cloudinary.config({
        cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
        api_key: process.env.CLOUDINARY_API_KEY,
        api_secret: process.env.CLOUDINARY_API_SECRET,
      })

      // Test ping
      const pingResult = await cloudinary.api.ping()
      console.log('   ‚úÖ Cloudinary SDK k·∫øt n·ªëi th√†nh c√¥ng')
      console.log(`   üìä Status: ${pingResult.status}`)
      
    } catch (cloudinaryError) {
      console.log(`   ‚ùå Cloudinary SDK l·ªói: ${cloudinaryError.message || cloudinaryError}`)

      const errorMessage = cloudinaryError.message || String(cloudinaryError)
      if (errorMessage.includes('Invalid API key')) {
        console.log('   üí° API Key kh√¥ng h·ª£p l·ªá')
      } else if (errorMessage.includes('Invalid API secret')) {
        console.log('   üí° API Secret kh√¥ng h·ª£p l·ªá')
      } else if (errorMessage.includes('Invalid cloud name')) {
        console.log('   üí° Cloud Name kh√¥ng h·ª£p l·ªá')
      } else {
        console.log('   üí° C√≥ th·ªÉ do API credentials ch∆∞a ƒë√∫ng ho·∫∑c m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh')
      }
    }

    console.log('\nüìù 4. T√≥m t·∫Øt:')
    if (process.env.CLOUDINARY_CLOUD_NAME === 'dgaktc3fb' && 
        process.env.CLOUDINARY_API_KEY && 
        process.env.CLOUDINARY_API_SECRET) {
      console.log('   ‚úÖ Cloudinary ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh c∆° b·∫£n')
      console.log('   üí° H√£y test upload ·∫£nh ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông ƒë√∫ng')
    } else {
      console.log('   ‚ùå Cloudinary c·∫ßn ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß')
      console.log('   üìã C·∫≠p nh·∫≠t .env.local v·ªõi th√¥ng tin th·ª±c t·ª´ Cloudinary Dashboard')
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh ki·ªÉm tra:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testCloudinary()
    .then(() => {
      console.log('\n‚úÖ Ki·ªÉm tra ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Ki·ªÉm tra th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { testCloudinary }
