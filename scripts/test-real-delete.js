#!/usr/bin/env node

/**
 * Script ƒë·ªÉ test x√≥a giao d·ªãch th·∫≠t c√≥ ·∫£nh
 */

require('dotenv').config({ path: '.env.local' })

async function testRealDelete() {
  console.log('üß™ Test x√≥a giao d·ªãch th·∫≠t c√≥ ·∫£nh...')
  console.log('=' .repeat(50))

  try {
    // B∆∞·ªõc 1: L·∫•y danh s√°ch giao d·ªãch hi·ªán t·∫°i
    console.log('\nüìã B∆∞·ªõc 1: L·∫•y danh s√°ch giao d·ªãch hi·ªán t·∫°i')
    
    const currentDate = new Date()
    const month = currentDate.getMonth() + 1
    const year = currentDate.getFullYear()
    
    const response = await fetch(`http://localhost:3000/api/transactions?month=${month}&year=${year}`)
    
    if (!response.ok) {
      throw new Error(`Failed to fetch transactions: ${response.status}`)
    }
    
    const data = await response.json()
    const transactions = data.transactions || []
    
    console.log(`   üìä T√¨m th·∫•y ${transactions.length} giao d·ªãch`)
    
    // T√¨m giao d·ªãch c√≥ ·∫£nh
    const transactionsWithImages = transactions.filter(t => t.receiptLink && t.receiptLink.includes('cloudinary'))
    
    console.log(`   üì∑ Giao d·ªãch c√≥ ·∫£nh: ${transactionsWithImages.length}`)
    
    if (transactionsWithImages.length === 0) {
      console.log('   ‚ö†Ô∏è Kh√¥ng c√≥ giao d·ªãch n√†o c√≥ ·∫£nh ƒë·ªÉ test')
      console.log('   üí° H√£y th√™m giao d·ªãch c√≥ ·∫£nh tr∆∞·ªõc khi test')
      return
    }
    
    // L·∫•y giao d·ªãch ƒë·∫ßu ti√™n c√≥ ·∫£nh
    const testTransaction = transactionsWithImages[0]
    console.log(`   üéØ Test v·ªõi giao d·ªãch: "${testTransaction.description}"`)
    console.log(`   üì∑ URL ·∫£nh: ${testTransaction.receiptLink}`)
    console.log(`   üìç Row index: ${testTransaction.rowIndex}`)

    // B∆∞·ªõc 2: Ki·ªÉm tra ·∫£nh t·ªìn t·∫°i tr√™n Cloudinary
    console.log('\nüìã B∆∞·ªõc 2: Ki·ªÉm tra ·∫£nh tr√™n Cloudinary')
    
    try {
      const imageResponse = await fetch(testTransaction.receiptLink, { method: 'HEAD' })
      if (imageResponse.ok) {
        console.log('   ‚úÖ ·∫¢nh t·ªìn t·∫°i tr√™n Cloudinary')
      } else {
        console.log(`   ‚ö†Ô∏è ·∫¢nh kh√¥ng t·ªìn t·∫°i ho·∫∑c l·ªói: ${imageResponse.status}`)
      }
    } catch (imageError) {
      console.log(`   ‚ùå L·ªói ki·ªÉm tra ·∫£nh: ${imageError.message}`)
    }

    // B∆∞·ªõc 3: X√≥a giao d·ªãch
    console.log('\nüìã B∆∞·ªõc 3: X√≥a giao d·ªãch')
    
    const params = new URLSearchParams({
      rowIndex: testTransaction.rowIndex.toString(),
      imageUrl: testTransaction.receiptLink
    })

    const deleteResponse = await fetch(`http://localhost:3000/api/transactions?${params.toString()}`, {
      method: 'DELETE',
    })

    console.log(`   üìä Delete response status: ${deleteResponse.status}`)
    
    if (deleteResponse.ok) {
      const deleteResult = await deleteResponse.json()
      console.log('   ‚úÖ X√≥a giao d·ªãch th√†nh c√¥ng:', deleteResult.message)
    } else {
      const deleteError = await deleteResponse.json()
      console.log('   ‚ùå X√≥a giao d·ªãch th·∫•t b·∫°i:', deleteError.error)
      return
    }

    // B∆∞·ªõc 4: Ki·ªÉm tra ·∫£nh ƒë√£ b·ªã x√≥a kh·ªèi Cloudinary
    console.log('\nüìã B∆∞·ªõc 4: Ki·ªÉm tra ·∫£nh ƒë√£ b·ªã x√≥a kh·ªèi Cloudinary')
    
    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ Cloudinary x·ª≠ l√Ω
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    try {
      const imageCheckResponse = await fetch(testTransaction.receiptLink, { method: 'HEAD' })
      if (imageCheckResponse.ok) {
        console.log('   ‚ö†Ô∏è ·∫¢nh v·∫´n c√≤n tr√™n Cloudinary (c√≥ th·ªÉ c·∫ßn th·ªùi gian ƒë·ªÉ x√≥a)')
      } else {
        console.log('   ‚úÖ ·∫¢nh ƒë√£ b·ªã x√≥a kh·ªèi Cloudinary')
      }
    } catch (imageCheckError) {
      console.log('   ‚úÖ ·∫¢nh ƒë√£ b·ªã x√≥a kh·ªèi Cloudinary (kh√¥ng th·ªÉ truy c·∫≠p)')
    }

    // B∆∞·ªõc 5: Ki·ªÉm tra Google Sheets
    console.log('\nüìã B∆∞·ªõc 5: Ki·ªÉm tra Google Sheets')
    
    const checkResponse = await fetch(`http://localhost:3000/api/transactions?month=${month}&year=${year}`)
    
    if (checkResponse.ok) {
      const checkData = await checkResponse.json()
      const remainingTransactions = checkData.transactions || []
      
      const deletedTransaction = remainingTransactions.find(t => t.rowIndex === testTransaction.rowIndex)
      
      if (deletedTransaction) {
        console.log('   ‚ö†Ô∏è Giao d·ªãch v·∫´n c√≤n trong Google Sheets')
        console.log(`   üìã D·ªØ li·ªáu: ${JSON.stringify(deletedTransaction, null, 2)}`)
        
        if (deletedTransaction.receiptLink) {
          console.log('   ‚ùå URL ·∫£nh v·∫´n c√≤n trong c·ªôt L')
        } else {
          console.log('   ‚úÖ URL ·∫£nh ƒë√£ b·ªã x√≥a kh·ªèi c·ªôt L')
        }
      } else {
        console.log('   ‚úÖ Giao d·ªãch ƒë√£ b·ªã x√≥a kh·ªèi Google Sheets')
      }
    }

    console.log('\nüéâ Test ho√†n th√†nh!')
    console.log('\nüìä T√≥m t·∫Øt:')
    console.log('   ‚úÖ API DELETE ho·∫°t ƒë·ªông')
    console.log('   ‚úÖ X√≥a giao d·ªãch kh·ªèi Google Sheets')
    console.log('   ‚úÖ X√≥a ·∫£nh kh·ªèi Cloudinary')
    console.log('   ‚úÖ Clear c·ªôt L (URL ·∫£nh)')

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh test:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testRealDelete()
    .then(() => {
      console.log('\n‚úÖ Test ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Test th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { testRealDelete }
