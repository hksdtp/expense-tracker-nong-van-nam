#!/usr/bin/env node

/**
 * Script ƒë·ªÉ s·ª≠a header c·ªßa Google Sheets ƒë·∫£m b·∫£o c√≥ ƒë·∫ßy ƒë·ªß 12 c·ªôt
 */

require('dotenv').config({ path: '.env.local' })

async function fixSheetsHeader() {
  console.log('üîß S·ª≠a header Google Sheets...')
  console.log('=' .repeat(50))
  
  try {
    const { google } = require('googleapis')
    const { JWT } = require('google-auth-library')

    // Kh·ªüi t·∫°o Google APIs
    let privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY
    if (privateKey.includes('\\n')) {
      privateKey = privateKey.replace(/\\n/g, '\n')
    }

    const auth = new JWT({
      email: process.env.GOOGLE_SHEETS_CLIENT_EMAIL,
      key: privateKey,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    })

    const sheets = google.sheets({ version: 'v4', auth })
    const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID

    console.log(`üìä Spreadsheet ID: ${SPREADSHEET_ID}`)

    // B∆∞·ªõc 1: Ki·ªÉm tra header hi·ªán t·∫°i
    console.log('\nüìã B∆∞·ªõc 1: Ki·ªÉm tra header hi·ªán t·∫°i')
    const currentResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A1:L1',
    })

    const currentHeader = currentResponse.data.values?.[0] || []
    console.log(`   üìä Header hi·ªán t·∫°i c√≥ ${currentHeader.length} c·ªôt:`)
    currentHeader.forEach((header, index) => {
      const column = String.fromCharCode(65 + index)
      console.log(`      ${column}: ${header}`)
    })

    // B∆∞·ªõc 2: ƒê·ªãnh nghƒ©a header ƒë√∫ng
    const correctHeader = [
      "Ng√†y", 
      "Danh m·ª•c", 
      "M√¥ t·∫£", 
      "S·ªë ti·ªÅn", 
      "Lo·∫°i", 
      "Link h√≥a ƒë∆°n", 
      "Th·ªùi gian", 
      "Danh m·ª•c ph·ª•", 
      "S·ªë l∆∞·ª£ng", 
      "Ph∆∞∆°ng th·ª©c thanh to√°n", 
      "Ghi ch√∫", 
      "URL ·∫£nh"
    ]

    console.log('\nüìã B∆∞·ªõc 2: Header ƒë√∫ng c·∫ßn c√≥:')
    correctHeader.forEach((header, index) => {
      const column = String.fromCharCode(65 + index)
      console.log(`      ${column}: ${header}`)
    })

    // B∆∞·ªõc 3: So s√°nh v√† quy·∫øt ƒë·ªãnh c√≥ c·∫ßn update kh√¥ng
    let needsUpdate = false
    if (currentHeader.length !== correctHeader.length) {
      console.log(`\n‚ö†Ô∏è S·ªë c·ªôt kh√¥ng kh·ªõp: hi·ªán t·∫°i ${currentHeader.length}, c·∫ßn ${correctHeader.length}`)
      needsUpdate = true
    } else {
      for (let i = 0; i < correctHeader.length; i++) {
        if (currentHeader[i] !== correctHeader[i]) {
          console.log(`\n‚ö†Ô∏è C·ªôt ${String.fromCharCode(65 + i)} kh√¥ng kh·ªõp: "${currentHeader[i]}" != "${correctHeader[i]}"`)
          needsUpdate = true
          break
        }
      }
    }

    if (!needsUpdate) {
      console.log('\n‚úÖ Header ƒë√£ ƒë√∫ng, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t!')
      return
    }

    // B∆∞·ªõc 4: C·∫≠p nh·∫≠t header
    console.log('\nüìã B∆∞·ªõc 4: C·∫≠p nh·∫≠t header...')
    
    const updateResult = await sheets.spreadsheets.values.update({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A1:L1',
      valueInputOption: 'RAW',
      resource: {
        values: [correctHeader],
      },
    })

    console.log('   ‚úÖ Header ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!')
    console.log(`   üìä ƒê√£ c·∫≠p nh·∫≠t ${updateResult.data.updatedCells} √¥`)

    // B∆∞·ªõc 5: X√°c minh l·∫°i
    console.log('\nüìã B∆∞·ªõc 5: X√°c minh header sau khi c·∫≠p nh·∫≠t')
    const verifyResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A1:L1',
    })

    const newHeader = verifyResponse.data.values?.[0] || []
    console.log(`   üìä Header m·ªõi c√≥ ${newHeader.length} c·ªôt:`)
    newHeader.forEach((header, index) => {
      const column = String.fromCharCode(65 + index)
      const isCorrect = header === correctHeader[index]
      console.log(`      ${column}: ${header} ${isCorrect ? '‚úÖ' : '‚ùå'}`)
    })

    console.log('\n‚úÖ S·ª≠a header ho√†n th√†nh!')

  } catch (error) {
    console.error('\n‚ùå L·ªói khi s·ª≠a header:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  fixSheetsHeader()
    .then(() => {
      console.log('\nüéâ Fix header ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• Fix header th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { fixSheetsHeader }
