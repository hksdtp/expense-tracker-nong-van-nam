#!/usr/bin/env node

/**
 * Script migration CH√çNH X√ÅC v·ªõi mapping ƒë√£ s·ª≠a
 * D·ª±a tr√™n c·∫•u tr√∫c th·ª±c t·∫ø c·ªßa Sheet1 v√† Nh·∫≠t k√Ω
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

// Conversion functions
function convertAmount(amountStr) {
  if (!amountStr || amountStr.trim() === '') return 0
  
  // Remove "ƒë" and spaces, convert dots to empty for Vietnamese format
  const cleanAmount = amountStr.replace(/ƒë/g, '').replace(/\s/g, '').replace(/\./g, '')
  const amount = parseInt(cleanAmount) || 0
  
  return amount
}

function convertType(loaiStr) {
  if (!loaiStr) return 'expense'
  
  const normalized = loaiStr.toLowerCase().trim()
  if (normalized === 'thu') return 'income'
  if (normalized === 'chi') return 'expense'
  
  return 'expense' // default
}

function convertImageUrl(googleDriveId) {
  if (!googleDriveId || googleDriveId.trim() === '') return ''
  
  // Convert Google Drive file ID to viewable URL
  return `https://drive.google.com/file/d/${googleDriveId}/view`
}

function extractTime(dateStr) {
  // Extract time from date, for now just return empty
  // Could be enhanced to extract time if available
  return ''
}

function convertPaymentMethod(nguonTien) {
  if (!nguonTien) return 'transfer'
  
  const normalized = nguonTien.toLowerCase().trim()
  if (normalized.includes('ti·ªÅn m·∫∑t') || normalized.includes('cash')) return 'cash'
  if (normalized.includes('t√†i kho·∫£n') || normalized.includes('chuy·ªÉn kho·∫£n')) return 'transfer'
  
  return 'transfer' // default
}

function mapNhatKyToSheet1Correct(nhatKyRow) {
  // Nh·∫≠t k√Ω structure: [Ng√†y, S·ªë ti·ªÅn, Ph√¢n lo·∫°i, Chi ti·∫øt, Gi√° tr·ªã, Lo·∫°i, Ngu·ªìn ti·ªÅn, H√¨nh ·∫£nh]
  // Sheet1 structure: [Ng√†y, Danh m·ª•c, M√¥ t·∫£, S·ªë ti·ªÅn, Lo·∫°i, Link h√≥a ƒë∆°n, Th·ªùi gian, Danh m·ª•c ph·ª•, S·ªë l∆∞·ª£ng, Ph∆∞∆°ng th·ª©c thanh to√°n, Ghi ch√∫, URL ·∫£nh]
  
  const [ngay, soTien, phanLoai, chiTiet, giaTri, loai, nguonTien, hinhAnh] = nhatKyRow
  
  return [
    ngay || '',                           // A. Ng√†y
    phanLoai || '',                       // B. Danh m·ª•c (t·ª´ C. Ph√¢n lo·∫°i)
    (chiTiet || '').trim(),               // C. M√¥ t·∫£ (t·ª´ D. Chi ti·∫øt)
    convertAmount(soTien),                // D. S·ªë ti·ªÅn (t·ª´ B. S·ªë ti·ªÅn)
    convertType(loai),                    // E. Lo·∫°i (t·ª´ F. Lo·∫°i - QUAN TR·ªåNG!)
    convertImageUrl(hinhAnh),             // F. Link h√≥a ƒë∆°n (t·ª´ H. H√¨nh ·∫£nh)
    extractTime(ngay),                    // G. Th·ªùi gian (extract t·ª´ ng√†y)
    '',                                   // H. Danh m·ª•c ph·ª• (tr·ªëng)
    1,                                    // I. S·ªë l∆∞·ª£ng (default = 1)
    convertPaymentMethod(nguonTien),      // J. Ph∆∞∆°ng th·ª©c thanh to√°n (t·ª´ G. Ngu·ªìn ti·ªÅn)
    '',                                   // K. Ghi ch√∫ (tr·ªëng)
    ''                                    // L. URL ·∫£nh (tr·ªëng - tr√°nh duplicate)
  ]
}

async function correctedMigrationTest() {
  console.log('üîß TEST MIGRATION V·ªöI MAPPING CH√çNH X√ÅC')
  console.log('=' .repeat(60))

  try {
    const { sheets } = await initGoogleAPIs()

    // L·∫•y 3 records ƒë·∫ßu ti√™n t·ª´ Nh·∫≠t k√Ω (skip header)
    console.log('\nüìã B∆∞·ªõc 1: L·∫•y test data t·ª´ sheet "Nh·∫≠t k√Ω"')
    
    const sourceResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Nh·∫≠t k√Ω!A2:H4', // 3 rows sau header
    })

    const sourceRows = sourceResponse.data.values || []
    console.log(`   üìä L·∫•y ƒë∆∞·ª£c ${sourceRows.length} records ƒë·ªÉ test`)

    if (sourceRows.length === 0) {
      console.log('   ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ test')
      return
    }

    // Show source structure
    console.log('\nüìã B∆∞·ªõc 2: Hi·ªÉn th·ªã c·∫•u tr√∫c source data')
    console.log('   üìä Nh·∫≠t k√Ω structure: [Ng√†y, S·ªë ti·ªÅn, Ph√¢n lo·∫°i, Chi ti·∫øt, Gi√° tr·ªã, Lo·∫°i, Ngu·ªìn ti·ªÅn, H√¨nh ·∫£nh]')
    
    sourceRows.forEach((row, index) => {
      console.log(`\n   üìä Source record ${index + 1}:`)
      console.log(`      A. Ng√†y: "${row[0] || ''}"`)
      console.log(`      B. S·ªë ti·ªÅn: "${row[1] || ''}"`)
      console.log(`      C. Ph√¢n lo·∫°i: "${row[2] || ''}"`)
      console.log(`      D. Chi ti·∫øt: "${row[3] || ''}"`)
      console.log(`      E. Gi√° tr·ªã: "${row[4] || ''}"`)
      console.log(`      F. Lo·∫°i: "${row[5] || ''}"`)
      console.log(`      G. Ngu·ªìn ti·ªÅn: "${row[6] || ''}"`)
      console.log(`      H. H√¨nh ·∫£nh: "${row[7] || ''}"`)
    })

    // Transform data v·ªõi mapping ch√≠nh x√°c
    console.log('\nüìã B∆∞·ªõc 3: Transform v·ªõi mapping CH√çNH X√ÅC')
    console.log('   üìä Sheet1 structure: [Ng√†y, Danh m·ª•c, M√¥ t·∫£, S·ªë ti·ªÅn, Lo·∫°i, Link h√≥a ƒë∆°n, Th·ªùi gian, Danh m·ª•c ph·ª•, S·ªë l∆∞·ª£ng, Ph∆∞∆°ng th·ª©c thanh to√°n, Ghi ch√∫, URL ·∫£nh]')
    
    const transformedRows = sourceRows.map((row, index) => {
      console.log(`\n   üìä Transform record ${index + 1}:`)
      
      const transformed = mapNhatKyToSheet1Correct(row)
      
      console.log(`      A. Ng√†y: "${transformed[0]}"`)
      console.log(`      B. Danh m·ª•c: "${transformed[1]}" ‚Üê t·ª´ C. Ph√¢n lo·∫°i`)
      console.log(`      C. M√¥ t·∫£: "${transformed[2]}" ‚Üê t·ª´ D. Chi ti·∫øt`)
      console.log(`      D. S·ªë ti·ªÅn: ${transformed[3]} ‚Üê t·ª´ B. S·ªë ti·ªÅn (converted)`)
      console.log(`      E. Lo·∫°i: "${transformed[4]}" ‚Üê t·ª´ F. Lo·∫°i (converted)`)
      console.log(`      F. Link h√≥a ƒë∆°n: "${transformed[5]}" ‚Üê t·ª´ H. H√¨nh ·∫£nh (converted)`)
      console.log(`      G. Th·ªùi gian: "${transformed[6]}"`)
      console.log(`      H. Danh m·ª•c ph·ª•: "${transformed[7]}"`)
      console.log(`      I. S·ªë l∆∞·ª£ng: ${transformed[8]}`)
      console.log(`      J. Ph∆∞∆°ng th·ª©c thanh to√°n: "${transformed[9]}" ‚Üê t·ª´ G. Ngu·ªìn ti·ªÅn`)
      console.log(`      K. Ghi ch√∫: "${transformed[10]}"`)
      console.log(`      L. URL ·∫£nh: "${transformed[11]}"`)
      
      return transformed
    })

    // Validation
    console.log('\nüìã B∆∞·ªõc 4: Validation chi ti·∫øt')
    
    transformedRows.forEach((row, index) => {
      console.log(`\n   üìä Validation record ${index + 1}:`)
      
      // Check critical fields
      const issues = []
      if (!row[0]) issues.push('Ng√†y tr·ªëng')
      if (!row[1]) issues.push('Danh m·ª•c tr·ªëng')
      if (typeof row[3] !== 'number') issues.push('S·ªë ti·ªÅn kh√¥ng ph·∫£i number')
      if (!['income', 'expense'].includes(row[4])) issues.push('Lo·∫°i kh√¥ng h·ª£p l·ªá')
      
      if (issues.length > 0) {
        console.log(`      ‚ùå Issues: ${issues.join(', ')}`)
      } else {
        console.log(`      ‚úÖ Validation PASSED`)
      }
    })

    console.log('\nüìã B∆∞·ªõc 5: Summary')
    console.log(`   ‚úÖ Source records: ${sourceRows.length}`)
    console.log(`   ‚úÖ Transformed records: ${transformedRows.length}`)
    console.log(`   ‚úÖ Mapping: CORRECTED`)
    console.log(`   ‚úÖ Key fixes:`)
    console.log(`      - E. Lo·∫°i s·ª≠ d·ª•ng F. Lo·∫°i (Thu/Chi) thay v√¨ C. Ph√¢n lo·∫°i`)
    console.log(`      - F. Link h√≥a ƒë∆°n t·ª´ H. H√¨nh ·∫£nh`)
    console.log(`      - L. URL ·∫£nh ƒë·ªÉ tr·ªëng (tr√°nh duplicate)`)

    return {
      sourceRows,
      transformedRows,
      success: true
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh test migration:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  correctedMigrationTest()
    .then((result) => {
      console.log('\n‚úÖ Test migration v·ªõi mapping ch√≠nh x√°c ho√†n th√†nh!')
      console.log('üí° Mapping conflicts ƒë√£ ƒë∆∞·ª£c gi·∫£i quy·∫øt')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Test migration th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { correctedMigrationTest }
