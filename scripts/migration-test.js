#!/usr/bin/env node

/**
 * Script test migration d·ªØ li·ªáu t·ª´ sheet "Nh·∫≠t k√Ω" sang "Sheet1"
 * Test v·ªõi 3 records ƒë·∫ßu ti√™n ƒë·ªÉ validate logic
 */

require('dotenv').config({ path: '.env.local' })
const { google } = require('googleapis')

// Google Sheets configuration
const SPREADSHEET_ID = process.env.GOOGLE_SHEETS_SHEET_ID || '14_Y-DsQvndhsFHrwb0W12guk36zqtzUnMA5tz9jw1D4'

async function initGoogleAPIs() {
  const serviceAccountEmail = process.env.GOOGLE_SHEETS_CLIENT_EMAIL
  const privateKey = process.env.GOOGLE_SHEETS_PRIVATE_KEY?.replace(/\\n/g, '\n')

  if (!serviceAccountEmail || !privateKey) {
    throw new Error('Missing Google service account credentials')
  }

  const auth = new google.auth.JWT(
    serviceAccountEmail,
    null,
    privateKey,
    ['https://www.googleapis.com/auth/spreadsheets']
  )

  const sheets = google.sheets({ version: 'v4', auth })
  
  return { sheets, auth }
}

// Mapping functions
function convertAmount(amountStr) {
  if (!amountStr || amountStr.trim() === '') return 0
  
  // Remove "ƒë" and spaces, convert dots to empty for Vietnamese format
  const cleanAmount = amountStr.replace(/ƒë/g, '').replace(/\s/g, '').replace(/\./g, '')
  const amount = parseInt(cleanAmount) || 0
  
  return amount
}

function convertType(loaiStr) {
  if (!loaiStr) return 'expense'
  
  const normalized = loaiStr.toLowerCase().trim()
  if (normalized === 'thu') return 'income'
  if (normalized === 'chi') return 'expense'
  
  return 'expense' // default
}

function convertImageUrl(googleDriveId) {
  if (!googleDriveId || googleDriveId.trim() === '') return ''
  
  // Convert Google Drive file ID to viewable URL
  return `https://drive.google.com/file/d/${googleDriveId}/view`
}

function mapNhatKyToSheet1(nhatKyRow) {
  // Nh·∫≠t k√Ω structure: [Ng√†y, S·ªë ti·ªÅn, Ph√¢n lo·∫°i, Chi ti·∫øt, Gi√° tr·ªã, Lo·∫°i, Ngu·ªìn ti·ªÅn, H√¨nh ·∫£nh]
  // Sheet1 structure: [Ng√†y, Danh m·ª•c, M√¥ t·∫£, S·ªë ti·ªÅn, Lo·∫°i, Danh m·ª•c ph·ª•, L√≠t xƒÉng, Ph∆∞∆°ng th·ª©c thanh to√°n, Ghi ch√∫, T√†i kho·∫£n, S·ªë d∆∞, Link bi√™n lai]
  
  const [ngay, soTien, phanLoai, chiTiet, giaTri, loai, nguonTien, hinhAnh] = nhatKyRow
  
  return [
    ngay || '',                           // A. Ng√†y
    phanLoai || '',                       // B. Danh m·ª•c (t·ª´ Ph√¢n lo·∫°i)
    (chiTiet || '').trim(),               // C. M√¥ t·∫£ (t·ª´ Chi ti·∫øt)
    convertAmount(soTien),                // D. S·ªë ti·ªÅn (convert format)
    convertType(loai),                    // E. Lo·∫°i (Thu/Chi ‚Üí income/expense)
    '',                                   // F. Danh m·ª•c ph·ª• (empty)
    '',                                   // G. L√≠t xƒÉng (empty)
    'transfer',                           // H. Ph∆∞∆°ng th·ª©c thanh to√°n (default)
    '',                                   // I. Ghi ch√∫ (empty)
    nguonTien || 'T√†i kho·∫£n',            // J. T√†i kho·∫£n (t·ª´ Ngu·ªìn ti·ªÅn)
    '',                                   // K. S·ªë d∆∞ (empty, s·∫Ω t√≠nh sau)
    convertImageUrl(hinhAnh)              // L. Link bi√™n lai (convert Google Drive)
  ]
}

async function testMigration() {
  console.log('üß™ TEST MIGRATION D·ªÆ LI·ªÜU T·ª™ "NH·∫¨T K√ù" SANG "SHEET1"')
  console.log('=' .repeat(60))

  try {
    const { sheets } = await initGoogleAPIs()

    // L·∫•y 3 records ƒë·∫ßu ti√™n t·ª´ Nh·∫≠t k√Ω (skip header)
    console.log('\nüìã B∆∞·ªõc 1: L·∫•y test data t·ª´ sheet "Nh·∫≠t k√Ω"')
    
    const sourceResponse = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Nh·∫≠t k√Ω!A2:H4', // 3 rows sau header
    })

    const sourceRows = sourceResponse.data.values || []
    console.log(`   üìä L·∫•y ƒë∆∞·ª£c ${sourceRows.length} records ƒë·ªÉ test`)

    if (sourceRows.length === 0) {
      console.log('   ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ test')
      return
    }

    // Transform data
    console.log('\nüìã B∆∞·ªõc 2: Transform d·ªØ li·ªáu')
    
    const transformedRows = sourceRows.map((row, index) => {
      console.log(`\n   üìä Transform record ${index + 1}:`)
      console.log(`      Input: [${row.join(', ')}]`)
      
      const transformed = mapNhatKyToSheet1(row)
      console.log(`      Output: [${transformed.join(', ')}]`)
      
      return transformed
    })

    // Validate transformed data
    console.log('\nüìã B∆∞·ªõc 3: Validate transformed data')
    
    transformedRows.forEach((row, index) => {
      console.log(`\n   üìä Validation record ${index + 1}:`)
      console.log(`      ‚úÖ Ng√†y: "${row[0]}"`)
      console.log(`      ‚úÖ Danh m·ª•c: "${row[1]}"`)
      console.log(`      ‚úÖ M√¥ t·∫£: "${row[2]}"`)
      console.log(`      ‚úÖ S·ªë ti·ªÅn: ${row[3]} (${typeof row[3]})`)
      console.log(`      ‚úÖ Lo·∫°i: "${row[4]}"`)
      console.log(`      ‚úÖ T√†i kho·∫£n: "${row[9]}"`)
      console.log(`      ‚úÖ Link bi√™n lai: "${row[11]}"`)
    })

    // Test write to Sheet1 (DRY RUN - ch·ªâ log, kh√¥ng th·ª±c s·ª± write)
    console.log('\nüìã B∆∞·ªõc 4: DRY RUN - Test write to Sheet1')
    console.log('   ‚ö†Ô∏è DRY RUN MODE - Kh√¥ng th·ª±c s·ª± ghi d·ªØ li·ªáu')
    
    // T√¨m row tr·ªëng ƒë·∫ßu ti√™n trong Sheet1
    const sheet1Response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: 'Sheet1!A:A',
    })

    const sheet1Rows = sheet1Response.data.values || []
    const nextEmptyRow = sheet1Rows.length + 1

    console.log(`   üìä Sheet1 hi·ªán c√≥ ${sheet1Rows.length} rows`)
    console.log(`   üìä S·∫Ω ghi t·ª´ row ${nextEmptyRow}`)

    transformedRows.forEach((row, index) => {
      const targetRow = nextEmptyRow + index
      console.log(`   üìù Row ${targetRow}: [${row.join(', ')}]`)
    })

    console.log('\nüìã B∆∞·ªõc 5: Summary')
    console.log(`   ‚úÖ Source records: ${sourceRows.length}`)
    console.log(`   ‚úÖ Transformed records: ${transformedRows.length}`)
    console.log(`   ‚úÖ Validation: PASSED`)
    console.log(`   ‚úÖ Target range: Sheet1!A${nextEmptyRow}:L${nextEmptyRow + transformedRows.length - 1}`)

    return {
      sourceRows,
      transformedRows,
      nextEmptyRow,
      success: true
    }

  } catch (error) {
    console.error('\n‚ùå L·ªói trong qu√° tr√¨nh test migration:', error)
    throw error
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  testMigration()
    .then((result) => {
      console.log('\n‚úÖ Test migration ho√†n th√†nh!')
      console.log('üí° ƒê·ªÉ th·ª±c hi·ªán migration th·∫≠t, c·∫ßn t·∫°o script production')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Test migration th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { testMigration }
