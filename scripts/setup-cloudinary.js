#!/usr/bin/env node

/**
 * Script t·ª± ƒë·ªông c√†i ƒë·∫∑t Cloudinary cho web app
 */

const fs = require('fs')
const path = require('path')
const readline = require('readline')

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
})

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve)
  })
}

async function setupCloudinary() {
  console.log('üöÄ C√†i ƒë·∫∑t Cloudinary cho Expense Tracker')
  console.log('=' .repeat(50))
  
  console.log('\nüìã B∆∞·ªõc 1: T·∫°o t√†i kho·∫£n Cloudinary')
  console.log('   - Trang ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c m·ªü trong tr√¨nh duy·ªát')
  console.log('   - ƒêƒÉng k√Ω t√†i kho·∫£n mi·ªÖn ph√≠ t·∫°i: https://cloudinary.com/users/register_free')
  console.log('   - Sau khi ƒëƒÉng k√Ω, ƒëƒÉng nh·∫≠p v√† v√†o Dashboard')
  
  const hasAccount = await question('\n‚úÖ B·∫°n ƒë√£ c√≥ t√†i kho·∫£n Cloudinary v√† ƒëang ·ªü Dashboard? (y/n): ')
  
  if (hasAccount.toLowerCase() !== 'y') {
    console.log('\nüìù H∆∞·ªõng d·∫´n t·∫°o t√†i kho·∫£n:')
    console.log('   1. ƒêi·ªÅn th√¥ng tin ƒëƒÉng k√Ω (email, password)')
    console.log('   2. X√°c nh·∫≠n email')
    console.log('   3. ƒêƒÉng nh·∫≠p v√† v√†o Dashboard')
    console.log('   4. Ch·∫°y l·∫°i script n√†y: npm run setup:cloudinary')
    rl.close()
    return
  }
  
  console.log('\nüìã B∆∞·ªõc 2: L·∫•y th√¥ng tin API t·ª´ Dashboard')
  console.log('   Trong Dashboard, b·∫°n s·∫Ω th·∫•y th√¥ng tin nh∆∞ sau:')
  console.log('   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê')
  console.log('   ‚îÇ Cloud Name: your-cloud-name         ‚îÇ')
  console.log('   ‚îÇ API Key: 123456789012345            ‚îÇ')
  console.log('   ‚îÇ API Secret: abcdef...xyz123         ‚îÇ')
  console.log('   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò')
  
  console.log('\nüìù Nh·∫≠p th√¥ng tin t·ª´ Dashboard:')
  
  const cloudName = await question('   Cloud Name: ')
  if (!cloudName.trim()) {
    console.log('‚ùå Cloud Name kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!')
    rl.close()
    return
  }
  
  const apiKey = await question('   API Key: ')
  if (!apiKey.trim()) {
    console.log('‚ùå API Key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!')
    rl.close()
    return
  }
  
  const apiSecret = await question('   API Secret: ')
  if (!apiSecret.trim()) {
    console.log('‚ùå API Secret kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!')
    rl.close()
    return
  }
  
  console.log('\nüìã B∆∞·ªõc 3: C·∫≠p nh·∫≠t c·∫•u h√¨nh')
  
  // Backup file .env.local
  const envPath = '.env.local'
  const backupPath = '.env.local.backup'
  
  try {
    if (fs.existsSync(envPath)) {
      fs.copyFileSync(envPath, backupPath)
      console.log(`   ‚úÖ ƒê√£ backup ${envPath} th√†nh ${backupPath}`)
    }
    
    // ƒê·ªçc file .env.local hi·ªán t·∫°i
    let envContent = fs.readFileSync(envPath, 'utf8')
    
    // C·∫≠p nh·∫≠t c√°c gi√° tr·ªã Cloudinary
    envContent = envContent.replace(
      /CLOUDINARY_CLOUD_NAME="[^"]*"/,
      `CLOUDINARY_CLOUD_NAME="${cloudName}"`
    )
    envContent = envContent.replace(
      /CLOUDINARY_API_KEY="[^"]*"/,
      `CLOUDINARY_API_KEY="${apiKey}"`
    )
    envContent = envContent.replace(
      /CLOUDINARY_API_SECRET="[^"]*"/,
      `CLOUDINARY_API_SECRET="${apiSecret}"`
    )
    
    // Ghi l·∫°i file
    fs.writeFileSync(envPath, envContent)
    console.log('   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t file .env.local')
    
  } catch (error) {
    console.log(`   ‚ùå L·ªói c·∫≠p nh·∫≠t file: ${error.message}`)
    rl.close()
    return
  }
  
  console.log('\nüìã B∆∞·ªõc 4: Ki·ªÉm tra c·∫•u h√¨nh')
  console.log('   ƒêang test k·∫øt n·ªëi Cloudinary...')
  
  // Test c·∫•u h√¨nh
  try {
    process.env.CLOUDINARY_CLOUD_NAME = cloudName
    process.env.CLOUDINARY_API_KEY = apiKey
    process.env.CLOUDINARY_API_SECRET = apiSecret
    
    const { v2: cloudinary } = require('cloudinary')
    
    cloudinary.config({
      cloud_name: cloudName,
      api_key: apiKey,
      api_secret: apiSecret,
    })
    
    const pingResult = await cloudinary.api.ping()
    console.log('   ‚úÖ K·∫øt n·ªëi Cloudinary th√†nh c√¥ng!')
    console.log(`   üìä Status: ${pingResult.status}`)
    
  } catch (testError) {
    console.log(`   ‚ùå L·ªói k·∫øt n·ªëi: ${testError.message}`)
    console.log('   üí° Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin API')
    rl.close()
    return
  }
  
  console.log('\nüéâ C√†i ƒë·∫∑t Cloudinary ho√†n th√†nh!')
  console.log('=' .repeat(50))
  console.log('üìä Th√¥ng tin c·∫•u h√¨nh:')
  console.log(`   Cloud Name: ${cloudName}`)
  console.log(`   API Key: ${apiKey}`)
  console.log(`   Folder: expense-receipts`)
  
  console.log('\nüß™ B∆∞·ªõc ti·∫øp theo:')
  console.log('   1. Restart server: npm run dev')
  console.log('   2. Test upload ·∫£nh: npm run test:upload-image')
  console.log('   3. Th·ª≠ th√™m giao d·ªãch v·ªõi ·∫£nh trong web app')
  
  console.log('\nüíæ Backup:')
  console.log(`   File g·ªëc ƒë√£ ƒë∆∞·ª£c backup t·∫°i: ${backupPath}`)
  console.log('   N·∫øu c√≥ v·∫•n ƒë·ªÅ, c√≥ th·ªÉ kh√¥i ph·ª•c b·∫±ng:')
  console.log(`   cp ${backupPath} ${envPath}`)
  
  rl.close()
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  setupCloudinary()
    .then(() => {
      console.log('\n‚úÖ Script ho√†n th√†nh!')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Script th·∫•t b·∫°i:', error)
      process.exit(1)
    })
}

module.exports = { setupCloudinary }
